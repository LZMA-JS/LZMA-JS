{"version":3,"file":"lzma-d.js","sources":["lzma-algo.mjs","lzma-d.mjs"],"sourcesContent":["/// Â© 2015 Nathan Rugg <nmrugg@gmail.com> | MIT\n/// See LICENSE for more details.\n\n/* jshint noarg:true, boss:true, unused:strict, strict:true, undef:true, noarg: true, forin:true, evil:true, newcap:false, -W041, -W021, worker:true, browser:true, node:true */\n\n/* global setImmediate, setTimeout, window, onmessage */\n\n/** xs */\n///NOTE: This is the master file that is used to generate lzma-c.js and lzma-d.js.\n///      Comments are used to determine which parts are to be removed.\n///\n/// cs-ce (compression start-end)\n/// ds-de (decompression start-end)\n/// xs-xe (only in this file start-end)\n/// co    (compression only)\n/// do    (decompression only)\n/** xe */\n\nexport var action_compress = 1;\nexport var action_decompress = 2;\nexport var action_progress = 3;\n\nvar wait = typeof setImmediate == \"function\" ? setImmediate : setTimeout,\n    __4294967296 = 4294967296,\n    N1_longLit = [4294967295, -__4294967296],\n    /** cs */\n    MIN_VALUE = [0, -9223372036854775808],\n    /** ce */\n    P0_longLit = [0, 0],\n    P1_longLit = [1, 0];\n\nfunction update_progress(percent, cbn) {\n    postMessage({\n        \"action\": action_progress,\n        \"cbn\": cbn,\n        \"result\": percent\n    });\n}\n\nfunction initDim(len) {\n    ///NOTE: This is MUCH faster than \"new Array(len)\" in newer versions of v8 (starting with Node.js 0.11.15, which uses v8 3.28.73).\n    var a = [];\n    a[len - 1] = undefined;\n    return a;\n}\n\nfunction add(a, b) {\n    return create(a[0] + b[0], a[1] + b[1]);\n}\n\n/** cs */\nfunction and(a, b) {\n    return makeFromBits(~~Math.max(Math.min(a[1] / __4294967296, 2147483647), -2147483648) & ~~Math.max(Math.min(b[1] / __4294967296, 2147483647), -2147483648), lowBits_0(a) & lowBits_0(b));\n}\n/** ce */\n\nfunction compare(a, b) {\n    var nega, negb;\n    if (a[0] == b[0] && a[1] == b[1]) {\n        return 0;\n    }\n    nega = a[1] < 0;\n    negb = b[1] < 0;\n    if (nega && !negb) {\n        return -1;\n    }\n    if (!nega && negb) {\n        return 1;\n    }\n    if (sub(a, b)[1] < 0) {\n        return -1;\n    }\n    return 1;\n}\n\nfunction create(valueLow, valueHigh) {\n    var diffHigh, diffLow;\n    valueHigh %= 1.8446744073709552E19;\n    valueLow %= 1.8446744073709552E19;\n    diffHigh = valueHigh % __4294967296;\n    diffLow = Math.floor(valueLow / __4294967296) * __4294967296;\n    valueHigh = valueHigh - diffHigh + diffLow;\n    valueLow = valueLow - diffLow + diffHigh;\n    while (valueLow < 0) {\n        valueLow += __4294967296;\n        valueHigh -= __4294967296;\n    }\n    while (valueLow > 4294967295) {\n        valueLow -= __4294967296;\n        valueHigh += __4294967296;\n    }\n    valueHigh = valueHigh % 1.8446744073709552E19;\n    while (valueHigh > 9223372032559808512) {\n        valueHigh -= 1.8446744073709552E19;\n    }\n    while (valueHigh < -9223372036854775808) {\n        valueHigh += 1.8446744073709552E19;\n    }\n    return [valueLow, valueHigh];\n}\n\n/** cs */\nfunction eq(a, b) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n/** ce */\nfunction fromInt(value) {\n    if (value >= 0) {\n        return [value, 0];\n    } else {\n        return [value + __4294967296, -__4294967296];\n    }\n}\n\nfunction lowBits_0(a) {\n    if (a[0] >= 2147483648) {\n        return ~~Math.max(Math.min(a[0] - __4294967296, 2147483647), -2147483648);\n    } else {\n        return ~~Math.max(Math.min(a[0], 2147483647), -2147483648);\n    }\n}\n/** cs */\nfunction makeFromBits(highBits, lowBits) {\n    var high, low;\n    high = highBits * __4294967296;\n    low = lowBits;\n    if (lowBits < 0) {\n        low += __4294967296;\n    }\n    return [low, high];\n}\n\nfunction pwrAsDouble(n) {\n    if (n <= 30) {\n        return 1 << n;\n    } else {\n        return pwrAsDouble(30) * pwrAsDouble(n - 30);\n    }\n}\n\nfunction shl(a, n) {\n    var diff, newHigh, newLow, twoToN;\n    n &= 63;\n    if (eq(a, MIN_VALUE)) {\n        if (!n) {\n            return a;\n        }\n        return P0_longLit;\n    }\n    if (a[1] < 0) {\n        throw new Error(\"Neg\");\n    }\n    twoToN = pwrAsDouble(n);\n    newHigh = a[1] * twoToN % 1.8446744073709552E19;\n    newLow = a[0] * twoToN;\n    diff = newLow - newLow % __4294967296;\n    newHigh += diff;\n    newLow -= diff;\n    if (newHigh >= 9223372036854775807) {\n        newHigh -= 1.8446744073709552E19;\n    }\n    return [newLow, newHigh];\n}\n\nfunction shr(a, n) {\n    var shiftFact;\n    n &= 63;\n    shiftFact = pwrAsDouble(n);\n    return create(Math.floor(a[0] / shiftFact), a[1] / shiftFact);\n}\n\nfunction shru(a, n) {\n    var sr;\n    n &= 63;\n    sr = shr(a, n);\n    if (a[1] < 0) {\n        sr = add(sr, shl([2, 0], 63 - n));\n    }\n    return sr;\n}\n\n/** ce */\n\nfunction sub(a, b) {\n    return create(a[0] - b[0], a[1] - b[1]);\n}\n\nfunction $ByteArrayInputStream(this$static, buf) {\n    this$static.buf = buf;\n    this$static.pos = 0;\n    this$static.count = buf.length;\n    return this$static;\n}\n\n/** ds */\nfunction $read(this$static) {\n    if (this$static.pos >= this$static.count)\n        return -1;\n    return this$static.buf[this$static.pos++] & 255;\n}\n/** de */\n/** cs */\nfunction $read_0(this$static, buf, off, len) {\n    if (this$static.pos >= this$static.count)\n        return -1;\n    len = Math.min(len, this$static.count - this$static.pos);\n    arraycopy(this$static.buf, this$static.pos, buf, off, len);\n    this$static.pos += len;\n    return len;\n}\n/** ce */\n\nfunction $ByteArrayOutputStream(this$static) {\n    this$static.buf = initDim(32);\n    this$static.count = 0;\n    return this$static;\n}\n\nfunction $toByteArray(this$static) {\n    var data = this$static.buf;\n    data.length = this$static.count;\n    return data;\n}\n\n/** cs */\nfunction $write(this$static, b) {\n    this$static.buf[this$static.count++] = b << 24 >> 24;\n}\n/** ce */\n\nfunction $write_0(this$static, buf, off, len) {\n    arraycopy(buf, off, this$static.buf, this$static.count, len);\n    this$static.count += len;\n}\n\n/** cs */\nfunction $getChars(this$static, srcBegin, srcEnd, dst, dstBegin) {\n    var srcIdx;\n    for (srcIdx = srcBegin; srcIdx < srcEnd; ++srcIdx) {\n        dst[dstBegin++] = this$static.charCodeAt(srcIdx);\n    }\n}\n/** ce */\n\nfunction arraycopy(src, srcOfs, dest, destOfs, len) {\n    for (var i = 0; i < len; ++i) {\n        dest[destOfs + i] = src[srcOfs + i];\n    }\n}\n\n/** cs */\nfunction $configure(this$static, encoder) {\n    $SetDictionarySize_0(encoder, 1 << this$static.s);\n    encoder._numFastBytes = this$static.f;\n    $SetMatchFinder(encoder, this$static.m);\n    \n    /// lc is always 3\n    /// lp is always 0\n    /// pb is always 2\n    encoder._numLiteralPosStateBits = 0;\n    encoder._numLiteralContextBits = 3;\n    encoder._posStateBits = 2;\n    ///this$static._posStateMask = (1 << pb) - 1;\n    encoder._posStateMask = 3;\n}\n\nfunction $init(this$static, input, output, length_0, mode) {\n    var encoder, i;\n    if (compare(length_0, N1_longLit) < 0)\n        throw new Error(\"invalid length \" + length_0);\n    this$static.length_0 = length_0;\n    encoder = $Encoder({});\n    $configure(mode, encoder);\n    //encoder._writeEndMark = typeof LZMA.disableEndMark == \"undefined\";\n    $WriteCoderProperties(encoder, output);\n    for (i = 0; i < 64; i += 8)\n        $write(output, lowBits_0(shr(length_0, i)) & 255);\n    this$static.chunker = (encoder._needReleaseMFStream = 0 , (encoder._inStream = input , encoder._finished = 0 , $Create_2(encoder) , encoder._rangeEncoder.Stream = output , $Init_4(encoder) , $FillDistancesPrices(encoder) , $FillAlignPrices(encoder) , encoder._lenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._lenEncoder, 1 << encoder._posStateBits) , encoder._repMatchLenEncoder._tableSize = encoder._numFastBytes + 1 - 2 , $UpdateTables(encoder._repMatchLenEncoder, 1 << encoder._posStateBits) , encoder.nowPos64 = P0_longLit , undefined) , $Chunker_0({}, encoder));\n}\n\nfunction $LZMAByteArrayCompressor(this$static, data, mode) {\n    this$static.output = $ByteArrayOutputStream({});\n    $init(this$static, $ByteArrayInputStream({}, data), this$static.output, fromInt(data.length), mode);\n    return this$static;\n}\n/** ce */\n\n/** ds */\nfunction $init_0(this$static, input, output) {\n    var decoder,\n        hex_length = \"\",\n        i,\n        properties = [],\n        r,\n        tmp_length;\n    \n    for (i = 0; i < 5; ++i) {\n        r = $read(input);\n        if (r == -1)\n            throw new Error(\"truncated input\");\n        properties[i] = r << 24 >> 24;\n    }\n    \n    decoder = $Decoder({});\n    if (!$SetDecoderProperties(decoder, properties)) {\n        throw new Error(\"corrupted input\");\n    }\n    for (i = 0; i < 64; i += 8) {\n        r = $read(input);\n        if (r == -1)\n            throw new Error(\"truncated input\");\n        r = r.toString(16);\n        if (r.length == 1) r = \"0\" + r;\n        hex_length = r + \"\" + hex_length;\n    }\n    \n    /// Was the length set in the header (if it was compressed from a stream, the length is all f\"s).\n    if (/^0+$|^f+$/i.test(hex_length)) {\n        /// The length is unknown, so set to -1.\n        this$static.length_0 = N1_longLit;\n    } else {\n        ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.\n        tmp_length = parseInt(hex_length, 16);\n        /// If the length is too long to handle, just set it to unknown.\n        if (tmp_length > 4294967295) {\n            this$static.length_0 = N1_longLit;\n        } else {\n            this$static.length_0 = fromInt(tmp_length);\n        }\n    }\n    \n    this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);\n}\n\nfunction $LZMAByteArrayDecompressor(this$static, data) {\n    this$static.output = $ByteArrayOutputStream({});\n    $init_0(this$static, $ByteArrayInputStream({}, data), this$static.output);\n    return this$static;\n}\n/** de */\n/** cs */\nfunction $Create_4(this$static, keepSizeBefore, keepSizeAfter, keepSizeReserv) {\n    var blockSize;\n    this$static._keepSizeBefore = keepSizeBefore;\n    this$static._keepSizeAfter = keepSizeAfter;\n    blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv;\n    if (this$static._bufferBase == null || this$static._blockSize != blockSize) {\n        this$static._bufferBase = null;\n        this$static._blockSize = blockSize;\n        this$static._bufferBase = initDim(this$static._blockSize);\n    }\n    this$static._pointerToLastSafePosition = this$static._blockSize - keepSizeAfter;\n}\n\nfunction $GetIndexByte(this$static, index) {\n    return this$static._bufferBase[this$static._bufferOffset + this$static._pos + index];\n}\n\nfunction $GetMatchLen(this$static, index, distance, limit) {\n    var i, pby;\n    if (this$static._streamEndWasReached) {\n        if (this$static._pos + index + limit > this$static._streamPos) {\n            limit = this$static._streamPos - (this$static._pos + index);\n        }\n    }\n    ++distance;\n    pby = this$static._bufferOffset + this$static._pos + index;\n    for (i = 0; i < limit && this$static._bufferBase[pby + i] == this$static._bufferBase[pby + i - distance]; ++i) {\n    }\n    return i;\n}\n\nfunction $GetNumAvailableBytes(this$static) {\n    return this$static._streamPos - this$static._pos;\n}\n\nfunction $MoveBlock(this$static) {\n    var i, numBytes, offset;\n    offset = this$static._bufferOffset + this$static._pos - this$static._keepSizeBefore;\n    if (offset > 0) {\n        --offset;\n    }\n    numBytes = this$static._bufferOffset + this$static._streamPos - offset;\n    for (i = 0; i < numBytes; ++i) {\n        this$static._bufferBase[i] = this$static._bufferBase[offset + i];\n    }\n    this$static._bufferOffset -= offset;\n}\n\nfunction $MovePos_1(this$static) {\n    var pointerToPostion;\n    this$static._pos += 1;\n    if (this$static._pos > this$static._posLimit) {\n        pointerToPostion = this$static._bufferOffset + this$static._pos;\n        if (pointerToPostion > this$static._pointerToLastSafePosition) {\n            $MoveBlock(this$static);\n        }\n        $ReadBlock(this$static);\n    }\n}\n\nfunction $ReadBlock(this$static) {\n    var numReadBytes, pointerToPostion, size;\n    if (this$static._streamEndWasReached)\n        return;\n    while (1) {\n        size = -this$static._bufferOffset + this$static._blockSize - this$static._streamPos;\n        if (!size)\n            return;\n        numReadBytes = $read_0(this$static._stream, this$static._bufferBase, this$static._bufferOffset + this$static._streamPos, size);\n        if (numReadBytes == -1) {\n            this$static._posLimit = this$static._streamPos;\n            pointerToPostion = this$static._bufferOffset + this$static._posLimit;\n            if (pointerToPostion > this$static._pointerToLastSafePosition) {\n                this$static._posLimit = this$static._pointerToLastSafePosition - this$static._bufferOffset;\n            }\n            this$static._streamEndWasReached = 1;\n            return;\n        }\n        this$static._streamPos += numReadBytes;\n        if (this$static._streamPos >= this$static._pos + this$static._keepSizeAfter) {\n            this$static._posLimit = this$static._streamPos - this$static._keepSizeAfter;\n        }\n    }\n}\n\nfunction $ReduceOffsets(this$static, subValue) {\n    this$static._bufferOffset += subValue;\n    this$static._posLimit -= subValue;\n    this$static._pos -= subValue;\n    this$static._streamPos -= subValue;\n}\n\nvar CrcTable = (function () {\n    var i, j, r, CrcTable = [];\n    for (i = 0; i < 256; ++i) {\n        r = i;\n        for (j = 0; j < 8; ++j)\n        if ((r & 1) != 0) {\n            r >>>= 1;\n            r ^= -306674912;\n        } else {\n            r >>>= 1;\n        }\n        CrcTable[i] = r;\n    }\n    return CrcTable;\n}());\n\nfunction $Create_3(this$static, historySize, keepAddBufferBefore, matchMaxLen, keepAddBufferAfter) {\n    var cyclicBufferSize, hs, windowReservSize;\n    if (historySize < 1073741567) {\n        this$static._cutValue = 16 + (matchMaxLen >> 1);\n        windowReservSize = ~~((historySize + keepAddBufferBefore + matchMaxLen + keepAddBufferAfter) / 2) + 256;\n        $Create_4(this$static, historySize + keepAddBufferBefore, matchMaxLen + keepAddBufferAfter, windowReservSize);\n        this$static._matchMaxLen = matchMaxLen;\n        cyclicBufferSize = historySize + 1;\n        if (this$static._cyclicBufferSize != cyclicBufferSize) {\n            this$static._son = initDim((this$static._cyclicBufferSize = cyclicBufferSize) * 2);\n        }\n\n        hs = 65536;\n        if (this$static.HASH_ARRAY) {\n            hs = historySize - 1;\n            hs |= hs >> 1;\n            hs |= hs >> 2;\n            hs |= hs >> 4;\n            hs |= hs >> 8;\n            hs >>= 1;\n            hs |= 65535;\n            if (hs > 16777216)\n            hs >>= 1;\n            this$static._hashMask = hs;\n            hs += 1;\n            hs += this$static.kFixHashSize;\n        }\n        \n        if (hs != this$static._hashSizeSum) {\n            this$static._hash = initDim(this$static._hashSizeSum = hs);\n        }\n    }\n}\n\nfunction $GetMatches(this$static, distances) {\n    var count, cur, curMatch, curMatch2, curMatch3, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, maxLen, offset, pby1, ptr0, ptr1, temp;\n    if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\n        lenLimit = this$static._matchMaxLen;\n    } else {\n        lenLimit = this$static._streamPos - this$static._pos;\n        if (lenLimit < this$static.kMinMatchCheck) {\n            $MovePos_0(this$static);\n            return 0;\n        }\n    }\n    offset = 0;\n    matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\n    cur = this$static._bufferOffset + this$static._pos;\n    maxLen = 1;\n    hash2Value = 0;\n    hash3Value = 0;\n    if (this$static.HASH_ARRAY) {\n        temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\n        hash2Value = temp & 1023;\n        temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\n        hash3Value = temp & 65535;\n        hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\n    } else {\n        hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\n    }\n\n    curMatch = this$static._hash[this$static.kFixHashSize + hashValue] || 0;\n    if (this$static.HASH_ARRAY) {\n        curMatch2 = this$static._hash[hash2Value] || 0;\n        curMatch3 = this$static._hash[1024 + hash3Value] || 0;\n        this$static._hash[hash2Value] = this$static._pos;\n        this$static._hash[1024 + hash3Value] = this$static._pos;\n        if (curMatch2 > matchMinPos) {\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch2] == this$static._bufferBase[cur]) {\n                distances[offset++] = maxLen = 2;\n                distances[offset++] = this$static._pos - curMatch2 - 1;\n            }\n        }\n        if (curMatch3 > matchMinPos) {\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch3] == this$static._bufferBase[cur]) {\n                if (curMatch3 == curMatch2) {\n                    offset -= 2;\n                }\n                distances[offset++] = maxLen = 3;\n                distances[offset++] = this$static._pos - curMatch3 - 1;\n                curMatch2 = curMatch3;\n            }\n        }\n        if (offset != 0 && curMatch2 == curMatch) {\n            offset -= 2;\n            maxLen = 1;\n        }\n    }\n    this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\n    ptr0 = (this$static._cyclicBufferPos << 1) + 1;\n    ptr1 = this$static._cyclicBufferPos << 1;\n    len0 = len1 = this$static.kNumHashDirectBytes;\n    if (this$static.kNumHashDirectBytes != 0) {\n        if (curMatch > matchMinPos) {\n            if (this$static._bufferBase[this$static._bufferOffset + curMatch + this$static.kNumHashDirectBytes] != this$static._bufferBase[cur + this$static.kNumHashDirectBytes]) {\n                distances[offset++] = maxLen = this$static.kNumHashDirectBytes;\n                distances[offset++] = this$static._pos - curMatch - 1;\n            }\n        }\n    }\n    count = this$static._cutValue;\n    while (1) {\n        if (curMatch <= matchMinPos || count == 0) {\n            count -= 1;\n            this$static._son[ptr0] = this$static._son[ptr1] = 0;\n            break;\n        }\n        delta = this$static._pos - curMatch;\n        cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\n        pby1 = this$static._bufferOffset + curMatch;\n        len = len0 < len1?len0:len1;\n        if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\n            while ((len += 1) != lenLimit) {\n                if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\n                    break;\n                }\n            }\n            if (maxLen < len) {\n                distances[offset++] = maxLen = len;\n                distances[offset++] = delta - 1;\n                if (len == lenLimit) {\n                this$static._son[ptr1] = this$static._son[cyclicPos];\n                this$static._son[ptr0] = this$static._son[cyclicPos + 1];\n                break;\n                }\n            }\n        }\n        if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\n            this$static._son[ptr1] = curMatch;\n            ptr1 = cyclicPos + 1;\n            curMatch = this$static._son[ptr1];\n            len1 = len;\n        } else {\n            this$static._son[ptr0] = curMatch;\n            ptr0 = cyclicPos;\n            curMatch = this$static._son[ptr0];\n            len0 = len;\n        }\n    }\n    $MovePos_0(this$static);\n    return offset;\n}\n\nfunction $Init_5(this$static) {\n    this$static._bufferOffset = 0;\n    this$static._pos = 0;\n    this$static._streamPos = 0;\n    this$static._streamEndWasReached = 0;\n    $ReadBlock(this$static);\n    this$static._cyclicBufferPos = 0;\n    $ReduceOffsets(this$static, -1);\n}\n\nfunction $MovePos_0(this$static) {\n    var subValue;\n    if ((this$static._cyclicBufferPos += 1) >= this$static._cyclicBufferSize) {\n        this$static._cyclicBufferPos = 0;\n    }\n    $MovePos_1(this$static);\n    if (this$static._pos == 1073741823) {\n        subValue = this$static._pos - this$static._cyclicBufferSize;\n        $NormalizeLinks(this$static._son, this$static._cyclicBufferSize * 2, subValue);\n        $NormalizeLinks(this$static._hash, this$static._hashSizeSum, subValue);\n        $ReduceOffsets(this$static, subValue);\n    }\n}\n\n///NOTE: This is only called after reading one whole gigabyte.\nfunction $NormalizeLinks(items, numItems, subValue) {\n    var i, value;\n    for (i = 0; i < numItems; ++i) {\n        value = items[i] || 0;\n        if (value <= subValue) {\n            value = 0;\n        } else {\n            value -= subValue;\n        }\n        items[i] = value;\n    }\n}\n\nfunction $SetType(this$static, numHashBytes) {\n    this$static.HASH_ARRAY = numHashBytes > 2;\n    if (this$static.HASH_ARRAY) {\n        this$static.kNumHashDirectBytes = 0;\n        this$static.kMinMatchCheck = 4;\n        this$static.kFixHashSize = 66560;\n    } else {\n        this$static.kNumHashDirectBytes = 2;\n        this$static.kMinMatchCheck = 3;\n        this$static.kFixHashSize = 0;\n    }\n}\n\nfunction $Skip(this$static, num) {\n    var count, cur, curMatch, cyclicPos, delta, hash2Value, hash3Value, hashValue, len, len0, len1, lenLimit, matchMinPos, pby1, ptr0, ptr1, temp;\n    do {\n        if (this$static._pos + this$static._matchMaxLen <= this$static._streamPos) {\n            lenLimit = this$static._matchMaxLen;\n        } else {\n            lenLimit = this$static._streamPos - this$static._pos;\n            if (lenLimit < this$static.kMinMatchCheck) {\n                $MovePos_0(this$static);\n                continue;\n            }\n        }\n        matchMinPos = this$static._pos > this$static._cyclicBufferSize?this$static._pos - this$static._cyclicBufferSize:0;\n        cur = this$static._bufferOffset + this$static._pos;\n        if (this$static.HASH_ARRAY) {\n            temp = CrcTable[this$static._bufferBase[cur] & 255] ^ this$static._bufferBase[cur + 1] & 255;\n            hash2Value = temp & 1023;\n            this$static._hash[hash2Value] = this$static._pos;\n            temp ^= (this$static._bufferBase[cur + 2] & 255) << 8;\n            hash3Value = temp & 65535;\n            this$static._hash[1024 + hash3Value] = this$static._pos;\n            hashValue = (temp ^ CrcTable[this$static._bufferBase[cur + 3] & 255] << 5) & this$static._hashMask;\n        } else {\n            hashValue = this$static._bufferBase[cur] & 255 ^ (this$static._bufferBase[cur + 1] & 255) << 8;\n        }\n        curMatch = this$static._hash[this$static.kFixHashSize + hashValue];\n        this$static._hash[this$static.kFixHashSize + hashValue] = this$static._pos;\n        ptr0 = (this$static._cyclicBufferPos << 1) + 1;\n        ptr1 = this$static._cyclicBufferPos << 1;\n        len0 = len1 = this$static.kNumHashDirectBytes;\n        count = this$static._cutValue;\n        while (1) {\n            if (curMatch <= matchMinPos || count == 0) {\n                count -= 1;\n                this$static._son[ptr0] = this$static._son[ptr1] = 0;\n                break;\n            }\n            delta = this$static._pos - curMatch;\n            cyclicPos = (delta <= this$static._cyclicBufferPos?this$static._cyclicBufferPos - delta:this$static._cyclicBufferPos - delta + this$static._cyclicBufferSize) << 1;\n            pby1 = this$static._bufferOffset + curMatch;\n            len = len0 < len1?len0:len1;\n            if (this$static._bufferBase[pby1 + len] == this$static._bufferBase[cur + len]) {\n                while ((len += 1) != lenLimit) {\n                    if (this$static._bufferBase[pby1 + len] != this$static._bufferBase[cur + len]) {\n                        break;\n                    }\n                }\n                if (len == lenLimit) {\n                    this$static._son[ptr1] = this$static._son[cyclicPos];\n                    this$static._son[ptr0] = this$static._son[cyclicPos + 1];\n                    break;\n                }\n            }\n            if ((this$static._bufferBase[pby1 + len] & 255) < (this$static._bufferBase[cur + len] & 255)) {\n                this$static._son[ptr1] = curMatch;\n                ptr1 = cyclicPos + 1;\n                curMatch = this$static._son[ptr1];\n                len1 = len;\n            } else {\n                this$static._son[ptr0] = curMatch;\n                ptr0 = cyclicPos;\n                curMatch = this$static._son[ptr0];\n                len0 = len;\n            }\n        }\n        $MovePos_0(this$static);\n    }\n    while ((num -= 1) != 0);\n}\n\n/** ce */\n/** ds */\nfunction $CopyBlock(this$static, distance, len) {\n    var pos = this$static._pos - distance - 1;\n    if (pos < 0) {\n        pos += this$static._windowSize;\n    }\n    for (; len != 0; len -= 1) {\n        if (pos >= this$static._windowSize) {\n            pos = 0;\n        }\n        this$static._buffer[this$static._pos] = this$static._buffer[pos];\n        this$static._pos += 1;\n        pos += 1;\n        if (this$static._pos >= this$static._windowSize) {\n            $Flush_0(this$static);\n        }\n    }\n}\n\nfunction $Create_5(this$static, windowSize) {\n    if (this$static._buffer == null || this$static._windowSize != windowSize) {\n        this$static._buffer = initDim(windowSize);\n    }\n    this$static._windowSize = windowSize;\n    this$static._pos = 0;\n    this$static._streamPos = 0;\n}\n\nfunction $Flush_0(this$static) {\n    var size = this$static._pos - this$static._streamPos;\n    if (!size) {\n        return;\n    }\n    $write_0(this$static._stream, this$static._buffer, this$static._streamPos, size);\n    if (this$static._pos >= this$static._windowSize) {\n        this$static._pos = 0;\n    }\n    this$static._streamPos = this$static._pos;\n}\n\nfunction $GetByte(this$static, distance) {\n    var pos = this$static._pos - distance - 1;\n    if (pos < 0) {\n        pos += this$static._windowSize;\n    }\n    return this$static._buffer[pos];\n}\n\nfunction $PutByte(this$static, b) {\n    this$static._buffer[this$static._pos] = b;\n    this$static._pos += 1;\n    if (this$static._pos >= this$static._windowSize) {\n        $Flush_0(this$static);\n    }\n}\n\nfunction $ReleaseStream(this$static) {\n    $Flush_0(this$static);\n    this$static._stream = null;\n}\n/** de */\n\nfunction GetLenToPosState(len) {\n    len -= 2;\n    if (len < 4) {\n        return len;\n    }\n    return 3;\n}\n\nfunction StateUpdateChar(index) {\n    if (index < 4) {\n        return 0;\n    }\n    if (index < 10) {\n        return index - 3;\n    }\n    return index - 6;\n}\n\n/** cs */\nfunction $Chunker_0(this$static, encoder) {\n    this$static.encoder = encoder;\n    this$static.decoder = null;\n    this$static.alive = 1;\n    return this$static;\n}\n/** ce */\n/** ds */\nfunction $Chunker(this$static, decoder) {\n    this$static.decoder = decoder;\n    this$static.encoder = null;\n    this$static.alive = 1;\n    return this$static;\n}\n/** de */\n\n/** ds */\nfunction $processChunkDecode(this$static) {\n    if (!this$static.alive) {\n        throw new Error(\"bad state\");\n    }\n    \n    if (this$static.encoder) {\n        throw new Error(\"No encoding\");\n    } else {\n        $processDecoderChunk(this$static);\n    }\n    return this$static.alive;\n}\n\nfunction $processDecoderChunk(this$static) {\n    var result = $CodeOneChunk(this$static.decoder);\n    if (result == -1) {\n        throw new Error(\"corrupted input\");\n    }\n    this$static.inBytesProcessed = N1_longLit;\n    this$static.outBytesProcessed = this$static.decoder.nowPos64;\n    if (result || compare(this$static.decoder.outSize, P0_longLit) >= 0 && compare(this$static.decoder.nowPos64, this$static.decoder.outSize) >= 0) {\n        $Flush_0(this$static.decoder.m_OutWindow);\n        $ReleaseStream(this$static.decoder.m_OutWindow);\n        this$static.decoder.m_RangeDecoder.Stream = null;\n        this$static.alive = 0;\n    }\n}\n/** de */\n/** cs */\nfunction $processChunkEncode(this$static) {\n    if (!this$static.alive) {\n        throw new Error(\"bad state\");\n    }\n    \n    if (this$static.encoder) {\n        $processEncoderChunk(this$static);\n    } else {\n        throw new Error(\"No decoding\");\n    }\n    return this$static.alive;\n}\n\nfunction $processEncoderChunk(this$static) {\n    $CodeOneBlock(this$static.encoder, this$static.encoder.processedInSize, this$static.encoder.processedOutSize, this$static.encoder.finished);\n    this$static.inBytesProcessed = this$static.encoder.processedInSize[0];\n    if (this$static.encoder.finished[0]) {\n        $ReleaseStreams(this$static.encoder);\n        this$static.alive = 0;\n    }\n}\n/** ce */\n\n/** ds */\nfunction $CodeInChunks(this$static, inStream, outStream, outSize) {\n    this$static.m_RangeDecoder.Stream = inStream;\n    $ReleaseStream(this$static.m_OutWindow);\n    this$static.m_OutWindow._stream = outStream;\n    $Init_1(this$static);\n    this$static.state = 0;\n    this$static.rep0 = 0;\n    this$static.rep1 = 0;\n    this$static.rep2 = 0;\n    this$static.rep3 = 0;\n    this$static.outSize = outSize;\n    this$static.nowPos64 = P0_longLit;\n    this$static.prevByte = 0;\n    return $Chunker({}, this$static);\n}\n\nfunction $CodeOneChunk(this$static) {\n    var decoder2, distance, len, numDirectBits, posSlot, posState;\n    posState = lowBits_0(this$static.nowPos64) & this$static.m_PosStateMask;\n    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsMatchDecoders, (this$static.state << 4) + posState)) {\n        decoder2 = $GetDecoder(this$static.m_LiteralDecoder, lowBits_0(this$static.nowPos64), this$static.prevByte);\n        if (this$static.state < 7) {\n            this$static.prevByte = $DecodeNormal(decoder2, this$static.m_RangeDecoder);\n        } else {\n            this$static.prevByte = $DecodeWithMatchByte(decoder2, this$static.m_RangeDecoder, $GetByte(this$static.m_OutWindow, this$static.rep0));\n        }\n        $PutByte(this$static.m_OutWindow, this$static.prevByte);\n        this$static.state = StateUpdateChar(this$static.state);\n        this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\n    } else {\n        if ($DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepDecoders, this$static.state)) {\n            len = 0;\n            if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG0Decoders, this$static.state)) {\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRep0LongDecoders, (this$static.state << 4) + posState)) {\n                    this$static.state = this$static.state < 7?9:11;\n                    len = 1;\n                }\n            } else {\n                if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG1Decoders, this$static.state)) {\n                    distance = this$static.rep1;\n                } else {\n                    if (!$DecodeBit(this$static.m_RangeDecoder, this$static.m_IsRepG2Decoders, this$static.state)) {\n                        distance = this$static.rep2;\n                    } else {\n                        distance = this$static.rep3;\n                        this$static.rep3 = this$static.rep2;\n                    }\n                    this$static.rep2 = this$static.rep1;\n                }\n                this$static.rep1 = this$static.rep0;\n                this$static.rep0 = distance;\n            }\n            if (!len) {\n                len = $Decode(this$static.m_RepLenDecoder, this$static.m_RangeDecoder, posState) + 2;\n                this$static.state = this$static.state < 7?8:11;\n            }\n        } else {\n            this$static.rep3 = this$static.rep2;\n            this$static.rep2 = this$static.rep1;\n            this$static.rep1 = this$static.rep0;\n            len = 2 + $Decode(this$static.m_LenDecoder, this$static.m_RangeDecoder, posState);\n            this$static.state = this$static.state < 7?7:10;\n            posSlot = $Decode_0(this$static.m_PosSlotDecoder[GetLenToPosState(len)], this$static.m_RangeDecoder);\n            if (posSlot >= 4) {\n                numDirectBits = (posSlot >> 1) - 1;\n                this$static.rep0 = (2 | posSlot & 1) << numDirectBits;\n                if (posSlot < 14) {\n                    this$static.rep0 += ReverseDecode(this$static.m_PosDecoders, this$static.rep0 - posSlot - 1, this$static.m_RangeDecoder, numDirectBits);\n                } else {\n                    this$static.rep0 += $DecodeDirectBits(this$static.m_RangeDecoder, numDirectBits - 4) << 4;\n                    this$static.rep0 += $ReverseDecode(this$static.m_PosAlignDecoder, this$static.m_RangeDecoder);\n                    if (this$static.rep0 < 0) {\n                        if (this$static.rep0 == -1) {\n                            return 1;\n                        }\n                        return -1;\n                    }\n                }\n            } else \n                this$static.rep0 = posSlot;\n        }\n        if (compare(fromInt(this$static.rep0), this$static.nowPos64) >= 0 || this$static.rep0 >= this$static.m_DictionarySizeCheck) {\n            return -1;\n        }\n        $CopyBlock(this$static.m_OutWindow, this$static.rep0, len);\n        this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\n        this$static.prevByte = $GetByte(this$static.m_OutWindow, 0);\n    }\n    return 0;\n}\n\nfunction $Decoder(this$static) {\n    this$static.m_OutWindow = {};\n    this$static.m_RangeDecoder = {};\n    this$static.m_IsMatchDecoders = initDim(192);\n    this$static.m_IsRepDecoders = initDim(12);\n    this$static.m_IsRepG0Decoders = initDim(12);\n    this$static.m_IsRepG1Decoders = initDim(12);\n    this$static.m_IsRepG2Decoders = initDim(12);\n    this$static.m_IsRep0LongDecoders = initDim(192);\n    this$static.m_PosSlotDecoder = initDim(4);\n    this$static.m_PosDecoders = initDim(114);\n    this$static.m_PosAlignDecoder = $BitTreeDecoder({}, 4);\n    this$static.m_LenDecoder = $Decoder$LenDecoder({});\n    this$static.m_RepLenDecoder = $Decoder$LenDecoder({});\n    this$static.m_LiteralDecoder = {};\n    for (var i = 0; i < 4; ++i) {\n        this$static.m_PosSlotDecoder[i] = $BitTreeDecoder({}, 6);\n    }\n    return this$static;\n}\n\nfunction $Init_1(this$static) {\n    this$static.m_OutWindow._streamPos = 0;\n    this$static.m_OutWindow._pos = 0;\n    InitBitModels(this$static.m_IsMatchDecoders);\n    InitBitModels(this$static.m_IsRep0LongDecoders);\n    InitBitModels(this$static.m_IsRepDecoders);\n    InitBitModels(this$static.m_IsRepG0Decoders);\n    InitBitModels(this$static.m_IsRepG1Decoders);\n    InitBitModels(this$static.m_IsRepG2Decoders);\n    InitBitModels(this$static.m_PosDecoders);\n    $Init_0(this$static.m_LiteralDecoder);\n    for (var i = 0; i < 4; ++i) {\n        InitBitModels(this$static.m_PosSlotDecoder[i].Models);\n    }\n    $Init(this$static.m_LenDecoder);\n    $Init(this$static.m_RepLenDecoder);\n    InitBitModels(this$static.m_PosAlignDecoder.Models);\n    $Init_8(this$static.m_RangeDecoder);\n}\n\nfunction $SetDecoderProperties(this$static, properties) {\n    var dictionarySize, i, lc, lp, pb, remainder, val;\n    if (properties.length < 5)\n        return 0;\n    val = properties[0] & 255;\n    lc = val % 9;\n    remainder = ~~(val / 9);\n    lp = remainder % 5;\n    pb = ~~(remainder / 5);\n    dictionarySize = 0;\n    for (i = 0; i < 4; ++i) {\n        dictionarySize += (properties[1 + i] & 255) << i * 8;\n    }\n    ///NOTE: If the input is bad, it might call for an insanely large dictionary size, which would crash the script.\n    if (dictionarySize > 99999999 || !$SetLcLpPb(this$static, lc, lp, pb)) {\n        return 0;\n    }\n    return $SetDictionarySize(this$static, dictionarySize);\n}\n\nfunction $SetDictionarySize(this$static, dictionarySize) {\n    if (dictionarySize < 0) {\n        return 0;\n    }\n    if (this$static.m_DictionarySize != dictionarySize) {\n        this$static.m_DictionarySize = dictionarySize;\n        this$static.m_DictionarySizeCheck = Math.max(this$static.m_DictionarySize, 1);\n        $Create_5(this$static.m_OutWindow, Math.max(this$static.m_DictionarySizeCheck, 4096));\n    }\n    return 1;\n}\n\nfunction $SetLcLpPb(this$static, lc, lp, pb) {\n    if (lc > 8 || lp > 4 || pb > 4) {\n        return 0;\n    }\n    $Create_0(this$static.m_LiteralDecoder, lp, lc);\n    var numPosStates = 1 << pb;\n    $Create(this$static.m_LenDecoder, numPosStates);\n    $Create(this$static.m_RepLenDecoder, numPosStates);\n    this$static.m_PosStateMask = numPosStates - 1;\n    return 1;\n}\n\nfunction $Create(this$static, numPosStates) {\n    for (; this$static.m_NumPosStates < numPosStates; this$static.m_NumPosStates += 1) {\n        this$static.m_LowCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\n        this$static.m_MidCoder[this$static.m_NumPosStates] = $BitTreeDecoder({}, 3);\n    }\n}\n\nfunction $Decode(this$static, rangeDecoder, posState) {\n    if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 0)) {\n        return $Decode_0(this$static.m_LowCoder[posState], rangeDecoder);\n    }\n    var symbol = 8;\n    if (!$DecodeBit(rangeDecoder, this$static.m_Choice, 1)) {\n        symbol += $Decode_0(this$static.m_MidCoder[posState], rangeDecoder);\n    } else {\n        symbol += 8 + $Decode_0(this$static.m_HighCoder, rangeDecoder);\n    }\n    return symbol;\n}\n\nfunction $Decoder$LenDecoder(this$static) {\n    this$static.m_Choice = initDim(2);\n    this$static.m_LowCoder = initDim(16);\n    this$static.m_MidCoder = initDim(16);\n    this$static.m_HighCoder = $BitTreeDecoder({}, 8);\n    this$static.m_NumPosStates = 0;\n    return this$static;\n}\n\nfunction $Init(this$static) {\n    InitBitModels(this$static.m_Choice);\n    for (var posState = 0; posState < this$static.m_NumPosStates; ++posState) {\n        InitBitModels(this$static.m_LowCoder[posState].Models);\n        InitBitModels(this$static.m_MidCoder[posState].Models);\n    }\n    InitBitModels(this$static.m_HighCoder.Models);\n}\n\n\nfunction $Create_0(this$static, numPosBits, numPrevBits) {\n    var i, numStates;\n    if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits)\n        return;\n    this$static.m_NumPosBits = numPosBits;\n    this$static.m_PosMask = (1 << numPosBits) - 1;\n    this$static.m_NumPrevBits = numPrevBits;\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n    this$static.m_Coders = initDim(numStates);\n    for (i = 0; i < numStates; ++i)\n        this$static.m_Coders[i] = $Decoder$LiteralDecoder$Decoder2({});\n}\n\nfunction $GetDecoder(this$static, pos, prevByte) {\n    return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\n}\n\nfunction $Init_0(this$static) {\n    var i, numStates;\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n    for (i = 0; i < numStates; ++i) {\n        InitBitModels(this$static.m_Coders[i].m_Decoders);\n    }\n}\n\n\nfunction $DecodeNormal(this$static, rangeDecoder) {\n    var symbol = 1;\n    do {\n        symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\n    } while (symbol < 256);\n    return symbol << 24 >> 24;\n}\n\nfunction $DecodeWithMatchByte(this$static, rangeDecoder, matchByte) {\n    var bit, matchBit, symbol = 1;\n    do {\n        matchBit = matchByte >> 7 & 1;\n        matchByte <<= 1;\n        bit = $DecodeBit(rangeDecoder, this$static.m_Decoders, (1 + matchBit << 8) + symbol);\n        symbol = symbol << 1 | bit;\n        if (matchBit != bit) {\n            while (symbol < 256) {\n                symbol = symbol << 1 | $DecodeBit(rangeDecoder, this$static.m_Decoders, symbol);\n            }\n        break;\n        }\n    } while (symbol < 256);\n    return symbol << 24 >> 24;\n}\n\nfunction $Decoder$LiteralDecoder$Decoder2(this$static) {\n    this$static.m_Decoders = initDim(768);\n    return this$static;\n}\n\n/** de */\n/** cs */\nvar g_FastPos = (function () {\n    var j, k, slotFast, c = 2, g_FastPos = [0, 1];\n    for (slotFast = 2; slotFast < 22; ++slotFast) {\n        //k = 1 << (slotFast >> 1) - 1;\n        var s = slotFast;\n        s >>= 1;\n        s -= 1;\n        k = 1;\n        k <<= s;\n        for (j = 0; j < k; ++j , ++c)\n            g_FastPos[c] = slotFast << 24 >> 24;\n    }\n    return g_FastPos;\n}());\n\nfunction $Backward(this$static, cur) {\n    var backCur, backMem, posMem, posPrev;\n    this$static._optimumEndIndex = cur;\n    posMem = this$static._optimum[cur].PosPrev;\n    backMem = this$static._optimum[cur].BackPrev;\n    do {\n        if (this$static._optimum[cur].Prev1IsChar) {\n            $MakeAsChar(this$static._optimum[posMem]);\n            this$static._optimum[posMem].PosPrev = posMem - 1;\n            if (this$static._optimum[cur].Prev2) {\n                this$static._optimum[posMem - 1].Prev1IsChar = 0;\n                this$static._optimum[posMem - 1].PosPrev = this$static._optimum[cur].PosPrev2;\n                this$static._optimum[posMem - 1].BackPrev = this$static._optimum[cur].BackPrev2;\n            }\n        }\n        posPrev = posMem;\n        backCur = backMem;\n        backMem = this$static._optimum[posPrev].BackPrev;\n        posMem = this$static._optimum[posPrev].PosPrev;\n        this$static._optimum[posPrev].BackPrev = backCur;\n        this$static._optimum[posPrev].PosPrev = cur;\n        cur = posPrev;\n    } while (cur > 0);\n    this$static.backRes = this$static._optimum[0].BackPrev;\n    this$static._optimumCurrentIndex = this$static._optimum[0].PosPrev;\n    return this$static._optimumCurrentIndex;\n}\n\nfunction $BaseInit(this$static) {\n    this$static._state = 0;\n    this$static._previousByte = 0;\n    for (var i = 0; i < 4; ++i) {\n        this$static._repDistances[i] = 0;\n    }\n}\n\nfunction $CodeOneBlock(this$static, inSize, outSize, finished) {\n    var baseVal, complexState, curByte, distance, footerBits, i, len, lenToPosState, matchByte, pos, posReduced, posSlot, posState, progressPosValuePrev, subCoder;\n    inSize[0] = P0_longLit;\n    outSize[0] = P0_longLit;\n    finished[0] = 1;\n    if (this$static._inStream) {\n        this$static._matchFinder._stream = this$static._inStream;\n        $Init_5(this$static._matchFinder);\n        this$static._needReleaseMFStream = 1;\n        this$static._inStream = null;\n    }\n    if (this$static._finished) {\n        return;\n    }\n    this$static._finished = 1;\n    progressPosValuePrev = this$static.nowPos64;\n    if (eq(this$static.nowPos64, P0_longLit)) {\n        if (!$GetNumAvailableBytes(this$static._matchFinder)) {\n            $Flush(this$static, lowBits_0(this$static.nowPos64));\n            return;\n        }\n        $ReadMatchDistances(this$static);\n        posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\n        $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 0);\n        this$static._state = StateUpdateChar(this$static._state);\n        curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\n        $Encode_1($GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte), this$static._rangeEncoder, curByte);\n        this$static._previousByte = curByte;\n        this$static._additionalOffset -= 1;\n        this$static.nowPos64 = add(this$static.nowPos64, P1_longLit);\n    }\n    if (!$GetNumAvailableBytes(this$static._matchFinder)) {\n        $Flush(this$static, lowBits_0(this$static.nowPos64));\n        return;\n    }\n    while (1) {\n        len = $GetOptimum(this$static, lowBits_0(this$static.nowPos64));\n        pos = this$static.backRes;\n        posState = lowBits_0(this$static.nowPos64) & this$static._posStateMask;\n        complexState = (this$static._state << 4) + posState;\n        if (len == 1 && pos == -1) {\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 0);\n            curByte = $GetIndexByte(this$static._matchFinder, -this$static._additionalOffset);\n            subCoder = $GetSubCoder(this$static._literalEncoder, lowBits_0(this$static.nowPos64), this$static._previousByte);\n            if (this$static._state < 7) {\n                $Encode_1(subCoder, this$static._rangeEncoder, curByte);\n            } else {\n                matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - this$static._additionalOffset);\n                $EncodeMatched(subCoder, this$static._rangeEncoder, matchByte, curByte);\n            }\n            this$static._previousByte = curByte;\n            this$static._state = StateUpdateChar(this$static._state);\n        } else {\n            $Encode_3(this$static._rangeEncoder, this$static._isMatch, complexState, 1);\n            if (pos < 4) {\n                $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 1);\n                if (!pos) {\n                    $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 0);\n                    if (len == 1) {\n                        $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 0);\n                    } else {\n                        $Encode_3(this$static._rangeEncoder, this$static._isRep0Long, complexState, 1);\n                    }\n                } else {\n                    $Encode_3(this$static._rangeEncoder, this$static._isRepG0, this$static._state, 1);\n                    if (pos == 1) {\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 0);\n                    } else {\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG1, this$static._state, 1);\n                        $Encode_3(this$static._rangeEncoder, this$static._isRepG2, this$static._state, pos - 2);\n                    }\n                }\n                if (len == 1) {\n                    this$static._state = this$static._state < 7?9:11;\n                } else {\n                    $Encode_0(this$static._repMatchLenEncoder, this$static._rangeEncoder, len - 2, posState);\n                    this$static._state = this$static._state < 7?8:11;\n                }\n                distance = this$static._repDistances[pos];\n                if (pos != 0) {\n                    for (var i = pos; i >= 1; --i) {\n                        this$static._repDistances[i] = this$static._repDistances[i - 1];\n                    }\n                    this$static._repDistances[0] = distance;\n                }\n            } else {\n                $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\n                this$static._state = this$static._state < 7?7:10;\n                $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, len - 2, posState);\n                pos -= 4;\n                posSlot = GetPosSlot(pos);\n                lenToPosState = GetLenToPosState(len);\n                $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, posSlot);\n                if (posSlot >= 4) {\n                    footerBits = (posSlot >> 1) - 1;\n                    baseVal = (2 | posSlot & 1) << footerBits;\n                    posReduced = pos - baseVal;\n                    if (posSlot < 14) {\n                        ReverseEncode(this$static._posEncoders, baseVal - posSlot - 1, this$static._rangeEncoder, footerBits, posReduced);\n                    } else {\n                        $EncodeDirectBits(this$static._rangeEncoder, posReduced >> 4, footerBits - 4);\n                        $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, posReduced & 15);\n                        this$static._alignPriceCount += 1;\n                    }\n                }\n                distance = pos;\n                for (var i = 3; i >= 1; --i) {\n                    this$static._repDistances[i] = this$static._repDistances[i - 1];\n                }\n                this$static._repDistances[0] = distance;\n                this$static._matchPriceCount += 1;\n            }\n            this$static._previousByte = $GetIndexByte(this$static._matchFinder, len - 1 - this$static._additionalOffset);\n        }\n        this$static._additionalOffset -= len;\n        this$static.nowPos64 = add(this$static.nowPos64, fromInt(len));\n        if (!this$static._additionalOffset) {\n            if (this$static._matchPriceCount >= 128) {\n                $FillDistancesPrices(this$static);\n            }\n            if (this$static._alignPriceCount >= 16) {\n                $FillAlignPrices(this$static);\n            }\n            inSize[0] = this$static.nowPos64;\n            outSize[0] = $GetProcessedSizeAdd(this$static._rangeEncoder);\n            if (!$GetNumAvailableBytes(this$static._matchFinder)) {\n                $Flush(this$static, lowBits_0(this$static.nowPos64));\n                return;\n            }\n            if (compare(sub(this$static.nowPos64, progressPosValuePrev), [4096, 0]) >= 0) {\n                this$static._finished = 0;\n                finished[0] = 0;\n                return;\n            }\n        }\n    }\n}\n\nfunction $Create_2(this$static) {\n    var bt, numHashBytes;\n    if (!this$static._matchFinder) {\n        bt = {};\n        numHashBytes = 4;\n        if (!this$static._matchFinderType) {\n            numHashBytes = 2;\n        }\n        $SetType(bt, numHashBytes);\n        this$static._matchFinder = bt;\n    }\n    $Create_1(this$static._literalEncoder, this$static._numLiteralPosStateBits, this$static._numLiteralContextBits);\n    if (this$static._dictionarySize == this$static._dictionarySizePrev && this$static._numFastBytesPrev == this$static._numFastBytes) {\n        return;\n    }\n    $Create_3(this$static._matchFinder, this$static._dictionarySize, 4096, this$static._numFastBytes, 274);\n    this$static._dictionarySizePrev = this$static._dictionarySize;\n    this$static._numFastBytesPrev = this$static._numFastBytes;\n}\n\nfunction $Encoder(this$static) {\n    var i;\n    this$static._repDistances = initDim(4);\n    this$static._optimum = [];\n    this$static._rangeEncoder = {};\n    this$static._isMatch = initDim(192);\n    this$static._isRep = initDim(12);\n    this$static._isRepG0 = initDim(12);\n    this$static._isRepG1 = initDim(12);\n    this$static._isRepG2 = initDim(12);\n    this$static._isRep0Long = initDim(192);\n    this$static._posSlotEncoder = [];\n    this$static._posEncoders = initDim(114);\n    this$static._posAlignEncoder = $BitTreeEncoder({}, 4);\n    this$static._lenEncoder = $Encoder$LenPriceTableEncoder({});\n    this$static._repMatchLenEncoder = $Encoder$LenPriceTableEncoder({});\n    this$static._literalEncoder = {};\n    this$static._matchDistances = [];\n    this$static._posSlotPrices = [];\n    this$static._distancesPrices = [];\n    this$static._alignPrices = initDim(16);\n    this$static.reps = initDim(4);\n    this$static.repLens = initDim(4);\n    this$static.processedInSize = [P0_longLit];\n    this$static.processedOutSize = [P0_longLit];\n    this$static.finished = [0];\n    this$static.properties = initDim(5);\n    this$static.tempPrices = initDim(128);\n    this$static._longestMatchLength = 0;\n    this$static._matchFinderType = 1;\n    this$static._numDistancePairs = 0;\n    this$static._numFastBytesPrev = -1;\n    this$static.backRes = 0;\n    for (i = 0; i < 4096; ++i) {\n        this$static._optimum[i] = {};\n    }\n    for (i = 0; i < 4; ++i) {\n        this$static._posSlotEncoder[i] = $BitTreeEncoder({}, 6);\n    }\n    return this$static;\n}\n\nfunction $FillAlignPrices(this$static) {\n    for (var i = 0; i < 16; ++i) {\n        this$static._alignPrices[i] = $ReverseGetPrice(this$static._posAlignEncoder, i);\n    }\n    this$static._alignPriceCount = 0;\n}\n\nfunction $FillDistancesPrices(this$static) {\n    var baseVal, encoder, footerBits, i, lenToPosState, posSlot, st, st2;\n    for (i = 4; i < 128; ++i) {\n        posSlot = GetPosSlot(i);\n        footerBits = (posSlot >> 1) - 1;\n        baseVal = (2 | posSlot & 1) << footerBits;\n        this$static.tempPrices[i] = ReverseGetPrice(this$static._posEncoders, baseVal - posSlot - 1, footerBits, i - baseVal);\n    }\n    for (lenToPosState = 0; lenToPosState < 4; ++lenToPosState) {\n        encoder = this$static._posSlotEncoder[lenToPosState];\n        st = lenToPosState << 6;\n        for (posSlot = 0; posSlot < this$static._distTableSize; posSlot += 1) {\n            this$static._posSlotPrices[st + posSlot] = $GetPrice_1(encoder, posSlot);\n        }\n        for (posSlot = 14; posSlot < this$static._distTableSize; posSlot += 1) {\n            this$static._posSlotPrices[st + posSlot] += (posSlot >> 1) - 1 - 4 << 6;\n        }\n        st2 = lenToPosState * 128;\n        for (i = 0; i < 4; ++i) {\n            this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + i];\n        }\n        for (; i < 128; ++i) {\n            this$static._distancesPrices[st2 + i] = this$static._posSlotPrices[st + GetPosSlot(i)] + this$static.tempPrices[i];\n        }\n    }\n    this$static._matchPriceCount = 0;\n}\n\nfunction $Flush(this$static, nowPos) {\n    $ReleaseMFStream(this$static);\n    $WriteEndMarker(this$static, nowPos & this$static._posStateMask);\n    for (var i = 0; i < 5; ++i) {\n        $ShiftLow(this$static._rangeEncoder);\n    }\n}\n\nfunction $GetOptimum(this$static, position) {\n    var cur, curAnd1Price, curAndLenCharPrice, curAndLenPrice, curBack, curPrice, currentByte, distance, i, len, lenEnd, lenMain, lenRes, lenTest, lenTest2, lenTestTemp, matchByte, matchPrice, newLen, nextIsChar, nextMatchPrice, nextOptimum, nextRepMatchPrice, normalMatchPrice, numAvailableBytes, numAvailableBytesFull, numDistancePairs, offs, offset, opt, optimum, pos, posPrev, posState, posStateNext, price_4, repIndex, repLen, repMatchPrice, repMaxIndex, shortRepPrice, startLen, state, state2, t, price, price_0, price_1, price_2, price_3;\n    if (this$static._optimumEndIndex != this$static._optimumCurrentIndex) {\n        lenRes = this$static._optimum[this$static._optimumCurrentIndex].PosPrev - this$static._optimumCurrentIndex;\n        this$static.backRes = this$static._optimum[this$static._optimumCurrentIndex].BackPrev;\n        this$static._optimumCurrentIndex = this$static._optimum[this$static._optimumCurrentIndex].PosPrev;\n        return lenRes;\n    }\n    this$static._optimumCurrentIndex = this$static._optimumEndIndex = 0;\n    if (this$static._longestMatchWasFound) {\n        lenMain = this$static._longestMatchLength;\n        this$static._longestMatchWasFound = 0;\n    } else {\n        lenMain = $ReadMatchDistances(this$static);\n    }\n    numDistancePairs = this$static._numDistancePairs;\n    numAvailableBytes = $GetNumAvailableBytes(this$static._matchFinder) + 1;\n    if (numAvailableBytes < 2) {\n        this$static.backRes = -1;\n        return 1;\n    }\n    if (numAvailableBytes > 273) {\n        numAvailableBytes = 273;\n    }\n    repMaxIndex = 0;\n    for (i = 0; i < 4; ++i) {\n        this$static.reps[i] = this$static._repDistances[i];\n        this$static.repLens[i] = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[i], 273);\n        if (this$static.repLens[i] > this$static.repLens[repMaxIndex]) {\n            repMaxIndex = i;\n        }\n    }\n    if (this$static.repLens[repMaxIndex] >= this$static._numFastBytes) {\n        this$static.backRes = repMaxIndex;\n        lenRes = this$static.repLens[repMaxIndex];\n        $MovePos(this$static, lenRes - 1);\n        return lenRes;\n    }\n    if (lenMain >= this$static._numFastBytes) {\n        this$static.backRes = this$static._matchDistances[numDistancePairs - 1] + 4;\n        $MovePos(this$static, lenMain - 1);\n        return lenMain;\n    }\n    currentByte = $GetIndexByte(this$static._matchFinder, -1);\n    matchByte = $GetIndexByte(this$static._matchFinder, -this$static._repDistances[0] - 1 - 1);\n    if (lenMain < 2 && currentByte != matchByte && this$static.repLens[repMaxIndex] < 2) {\n        this$static.backRes = -1;\n        return 1;\n    }\n    this$static._optimum[0].State = this$static._state;\n    posState = position & this$static._posStateMask;\n    this$static._optimum[1].Price = ProbPrices[this$static._isMatch[(this$static._state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, this$static._previousByte), this$static._state >= 7, matchByte, currentByte);\n    $MakeAsChar(this$static._optimum[1]);\n    matchPrice = ProbPrices[2048 - this$static._isMatch[(this$static._state << 4) + posState] >>> 2];\n    repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[this$static._state] >>> 2];\n    if (matchByte == currentByte) {\n        shortRepPrice = repMatchPrice + $GetRepLen1Price(this$static, this$static._state, posState);\n        if (shortRepPrice < this$static._optimum[1].Price) {\n            this$static._optimum[1].Price = shortRepPrice;\n            $MakeAsShortRep(this$static._optimum[1]);\n        }\n    }\n    lenEnd = lenMain >= this$static.repLens[repMaxIndex]?lenMain:this$static.repLens[repMaxIndex];\n    if (lenEnd < 2) {\n        this$static.backRes = this$static._optimum[1].BackPrev;\n        return 1;\n    }\n    this$static._optimum[1].PosPrev = 0;\n    this$static._optimum[0].Backs0 = this$static.reps[0];\n    this$static._optimum[0].Backs1 = this$static.reps[1];\n    this$static._optimum[0].Backs2 = this$static.reps[2];\n    this$static._optimum[0].Backs3 = this$static.reps[3];\n    len = lenEnd;\n    do {\n        this$static._optimum[len].Price = 268435455;\n        len -= 1;\n    } while (len >= 2);\n    for (i = 0; i < 4; ++i) {\n        repLen = this$static.repLens[i];\n        if (repLen < 2) {\n            continue;\n        }\n        price_4 = repMatchPrice + $GetPureRepPrice(this$static, i, this$static._state, posState);\n        do {\n            curAndLenPrice = price_4 + $GetPrice(this$static._repMatchLenEncoder, repLen - 2, posState);\n            optimum = this$static._optimum[repLen];\n            if (curAndLenPrice < optimum.Price) {\n                optimum.Price = curAndLenPrice;\n                optimum.PosPrev = 0;\n                optimum.BackPrev = i;\n                optimum.Prev1IsChar = 0;\n            }\n        } while ((repLen -= 1) >= 2);\n    }\n    normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[this$static._state] >>> 2];\n    len = this$static.repLens[0] >= 2?this$static.repLens[0] + 1:2;\n    if (len <= lenMain) {\n        offs = 0;\n        while (len > this$static._matchDistances[offs]) {\n            offs += 2;\n        }\n        for (;; len += 1) {\n            distance = this$static._matchDistances[offs + 1];\n            curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, distance, len, posState);\n            optimum = this$static._optimum[len];\n            if (curAndLenPrice < optimum.Price) {\n                optimum.Price = curAndLenPrice;\n                optimum.PosPrev = 0;\n                optimum.BackPrev = distance + 4;\n                optimum.Prev1IsChar = 0;\n            }\n            if (len == this$static._matchDistances[offs]) {\n                offs += 2;\n                if (offs == numDistancePairs) {\n                    break;\n                }\n            }\n        }\n    }\n    cur = 0;\n    while (1) {\n        ++cur;\n        if (cur == lenEnd) {\n            return $Backward(this$static, cur);\n        }\n        newLen = $ReadMatchDistances(this$static);\n        numDistancePairs = this$static._numDistancePairs;\n        if (newLen >= this$static._numFastBytes) {\n            this$static._longestMatchLength = newLen;\n            this$static._longestMatchWasFound = 1;\n            return $Backward(this$static, cur);\n        }\n        position += 1;\n        posPrev = this$static._optimum[cur].PosPrev;\n        if (this$static._optimum[cur].Prev1IsChar) {\n            posPrev -= 1;\n            if (this$static._optimum[cur].Prev2) {\n                state = this$static._optimum[this$static._optimum[cur].PosPrev2].State;\n                if (this$static._optimum[cur].BackPrev2 < 4) {\n                    state = (state < 7) ? 8 : 11;\n                } else {\n                    state = (state < 7) ? 7 : 10;\n                }\n            } else {\n                state = this$static._optimum[posPrev].State;\n            }\n            state = StateUpdateChar(state);\n        } else {\n            state = this$static._optimum[posPrev].State;\n        }\n        if (posPrev == cur - 1) {\n            if (!this$static._optimum[cur].BackPrev) {\n                state = state < 7?9:11;\n            } else {\n                state = StateUpdateChar(state);\n            }\n        } else {\n            if (this$static._optimum[cur].Prev1IsChar && this$static._optimum[cur].Prev2) {\n                posPrev = this$static._optimum[cur].PosPrev2;\n                pos = this$static._optimum[cur].BackPrev2;\n                state = state < 7?8:11;\n            } else {\n                pos = this$static._optimum[cur].BackPrev;\n                if (pos < 4) {\n                    state = state < 7?8:11;\n                } else {\n                    state = state < 7?7:10;\n                }\n            }\n            opt = this$static._optimum[posPrev];\n            if (pos < 4) {\n                if (!pos) {\n                    this$static.reps[0] = opt.Backs0;\n                    this$static.reps[1] = opt.Backs1;\n                    this$static.reps[2] = opt.Backs2;\n                    this$static.reps[3] = opt.Backs3;\n                } else if (pos == 1) {\n                    this$static.reps[0] = opt.Backs1;\n                    this$static.reps[1] = opt.Backs0;\n                    this$static.reps[2] = opt.Backs2;\n                    this$static.reps[3] = opt.Backs3;\n                } else if (pos == 2) {\n                    this$static.reps[0] = opt.Backs2;\n                    this$static.reps[1] = opt.Backs0;\n                    this$static.reps[2] = opt.Backs1;\n                    this$static.reps[3] = opt.Backs3;\n                } else {\n                    this$static.reps[0] = opt.Backs3;\n                    this$static.reps[1] = opt.Backs0;\n                    this$static.reps[2] = opt.Backs1;\n                    this$static.reps[3] = opt.Backs2;\n                }\n            } else {\n                this$static.reps[0] = pos - 4;\n                this$static.reps[1] = opt.Backs0;\n                this$static.reps[2] = opt.Backs1;\n                this$static.reps[3] = opt.Backs2;\n            }\n        }\n        this$static._optimum[cur].State = state;\n        this$static._optimum[cur].Backs0 = this$static.reps[0];\n        this$static._optimum[cur].Backs1 = this$static.reps[1];\n        this$static._optimum[cur].Backs2 = this$static.reps[2];\n        this$static._optimum[cur].Backs3 = this$static.reps[3];\n        curPrice = this$static._optimum[cur].Price;\n        currentByte = $GetIndexByte(this$static._matchFinder, -1);\n        matchByte = $GetIndexByte(this$static._matchFinder, -this$static.reps[0] - 1 - 1);\n        posState = position & this$static._posStateMask;\n        curAnd1Price = curPrice + ProbPrices[this$static._isMatch[(state << 4) + posState] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position, $GetIndexByte(this$static._matchFinder, -2)), state >= 7, matchByte, currentByte);\n        nextOptimum = this$static._optimum[cur + 1];\n        nextIsChar = 0;\n        if (curAnd1Price < nextOptimum.Price) {\n            nextOptimum.Price = curAnd1Price;\n            nextOptimum.PosPrev = cur;\n            nextOptimum.BackPrev = -1;\n            nextOptimum.Prev1IsChar = 0;\n            nextIsChar = 1;\n        }\n        matchPrice = curPrice + ProbPrices[2048 - this$static._isMatch[(state << 4) + posState] >>> 2];\n        repMatchPrice = matchPrice + ProbPrices[2048 - this$static._isRep[state] >>> 2];\n        if (matchByte == currentByte && !(nextOptimum.PosPrev < cur && !nextOptimum.BackPrev)) {\n            shortRepPrice = repMatchPrice + (ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2]);\n            if (shortRepPrice <= nextOptimum.Price) {\n                nextOptimum.Price = shortRepPrice;\n                nextOptimum.PosPrev = cur;\n                nextOptimum.BackPrev = 0;\n                nextOptimum.Prev1IsChar = 0;\n                nextIsChar = 1;\n            }\n        }\n        numAvailableBytesFull = $GetNumAvailableBytes(this$static._matchFinder) + 1;\n        numAvailableBytesFull = 4095 - cur < numAvailableBytesFull?4095 - cur:numAvailableBytesFull;\n        numAvailableBytes = numAvailableBytesFull;\n        if (numAvailableBytes < 2) {\n            continue;\n        }\n        if (numAvailableBytes > this$static._numFastBytes) {\n            numAvailableBytes = this$static._numFastBytes;\n        }\n        if (!nextIsChar && matchByte != currentByte) {\n            t = Math.min(numAvailableBytesFull - 1, this$static._numFastBytes);\n            lenTest2 = $GetMatchLen(this$static._matchFinder, 0, this$static.reps[0], t);\n            if (lenTest2 >= 2) {\n                state2 = StateUpdateChar(state);\n                posStateNext = position + 1 & this$static._posStateMask;\n                nextRepMatchPrice = curAnd1Price + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\n                offset = cur + 1 + lenTest2;\n                while (lenEnd < offset) {\n                    this$static._optimum[lenEnd += 1].Price = 268435455;\n                }\n                curAndLenPrice = nextRepMatchPrice + (price = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price + $GetPureRepPrice(this$static, 0, state2, posStateNext));\n                optimum = this$static._optimum[offset];\n                if (curAndLenPrice < optimum.Price) {\n                    optimum.Price = curAndLenPrice;\n                    optimum.PosPrev = cur + 1;\n                    optimum.BackPrev = 0;\n                    optimum.Prev1IsChar = 1;\n                    optimum.Prev2 = 0;\n                }\n            }\n        }\n        startLen = 2;\n        for (repIndex = 0; repIndex < 4; ++repIndex) {\n            lenTest = $GetMatchLen(this$static._matchFinder, -1, this$static.reps[repIndex], numAvailableBytes);\n            if (lenTest < 2) {\n                continue;\n            }\n            lenTestTemp = lenTest;\n            do {\n                while (lenEnd < cur + lenTest) {\n                    this$static._optimum[lenEnd += 1].Price = 268435455;\n                }\n                curAndLenPrice = repMatchPrice + (price_0 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_0 + $GetPureRepPrice(this$static, repIndex, state, posState));\n                optimum = this$static._optimum[cur + lenTest];\n                if (curAndLenPrice < optimum.Price) {\n                    optimum.Price = curAndLenPrice;\n                    optimum.PosPrev = cur;\n                    optimum.BackPrev = repIndex;\n                    optimum.Prev1IsChar = 0;\n                }\n            } while ((lenTest -= 1) >= 2);\n            lenTest = lenTestTemp;\n            if (!repIndex) {\n                startLen = lenTest + 1;\n            }\n            if (lenTest < numAvailableBytesFull) {\n                t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\n                lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, this$static.reps[repIndex], t);\n                if (lenTest2 >= 2) {\n                    state2 = state < 7?8:11;\n                    posStateNext = position + lenTest & this$static._posStateMask;\n                    curAndLenCharPrice = repMatchPrice + (price_1 = $GetPrice(this$static._repMatchLenEncoder, lenTest - 2, posState) , price_1 + $GetPureRepPrice(this$static, repIndex, state, posState)) + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - 1 - (this$static.reps[repIndex] + 1)), $GetIndexByte(this$static._matchFinder, lenTest - 1));\n                    state2 = StateUpdateChar(state2);\n                    posStateNext = position + lenTest + 1 & this$static._posStateMask;\n                    nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\n                    nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\n                    offset = lenTest + 1 + lenTest2;\n                    while (lenEnd < cur + offset) {\n                        this$static._optimum[lenEnd += 1].Price = 268435455;\n                    }\n                    curAndLenPrice = nextRepMatchPrice + (price_2 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_2 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\n                    optimum = this$static._optimum[cur + offset];\n                    if (curAndLenPrice < optimum.Price) {\n                        optimum.Price = curAndLenPrice;\n                        optimum.PosPrev = cur + lenTest + 1;\n                        optimum.BackPrev = 0;\n                        optimum.Prev1IsChar = 1;\n                        optimum.Prev2 = 1;\n                        optimum.PosPrev2 = cur;\n                        optimum.BackPrev2 = repIndex;\n                    }\n                }\n            }\n        }\n        if (newLen > numAvailableBytes) {\n            newLen = numAvailableBytes;\n            for (numDistancePairs = 0; newLen > this$static._matchDistances[numDistancePairs]; numDistancePairs += 2) {}\n            this$static._matchDistances[numDistancePairs] = newLen;\n            numDistancePairs += 2;\n        }\n        if (newLen >= startLen) {\n        normalMatchPrice = matchPrice + ProbPrices[this$static._isRep[state] >>> 2];\n        while (lenEnd < cur + newLen) {\n            this$static._optimum[lenEnd += 1].Price = 268435455;\n        }\n        offs = 0;\n        while (startLen > this$static._matchDistances[offs]) {\n            offs += 2;\n        }\n        for (lenTest = startLen;; lenTest += 1) {\n            curBack = this$static._matchDistances[offs + 1];\n            curAndLenPrice = normalMatchPrice + $GetPosLenPrice(this$static, curBack, lenTest, posState);\n            optimum = this$static._optimum[cur + lenTest];\n            if (curAndLenPrice < optimum.Price) {\n                optimum.Price = curAndLenPrice;\n                optimum.PosPrev = cur;\n                optimum.BackPrev = curBack + 4;\n                optimum.Prev1IsChar = 0;\n            }\n            if (lenTest == this$static._matchDistances[offs]) {\n                if (lenTest < numAvailableBytesFull) {\n                    t = Math.min(numAvailableBytesFull - 1 - lenTest, this$static._numFastBytes);\n                    lenTest2 = $GetMatchLen(this$static._matchFinder, lenTest, curBack, t);\n                    if (lenTest2 >= 2) {\n                        state2 = state < 7?7:10;\n                        posStateNext = position + lenTest & this$static._posStateMask;\n                        curAndLenCharPrice = curAndLenPrice + ProbPrices[this$static._isMatch[(state2 << 4) + posStateNext] >>> 2] + $GetPrice_0($GetSubCoder(this$static._literalEncoder, position + lenTest, $GetIndexByte(this$static._matchFinder, lenTest - 1 - 1)), 1, $GetIndexByte(this$static._matchFinder, lenTest - (curBack + 1) - 1), $GetIndexByte(this$static._matchFinder, lenTest - 1));\n                        state2 = StateUpdateChar(state2);\n                        posStateNext = position + lenTest + 1 & this$static._posStateMask;\n                        nextMatchPrice = curAndLenCharPrice + ProbPrices[2048 - this$static._isMatch[(state2 << 4) + posStateNext] >>> 2];\n                        nextRepMatchPrice = nextMatchPrice + ProbPrices[2048 - this$static._isRep[state2] >>> 2];\n                        offset = lenTest + 1 + lenTest2;\n                        while (lenEnd < cur + offset) {\n                            this$static._optimum[lenEnd += 1].Price = 268435455;\n                        }\n                        curAndLenPrice = nextRepMatchPrice + (price_3 = $GetPrice(this$static._repMatchLenEncoder, lenTest2 - 2, posStateNext) , price_3 + $GetPureRepPrice(this$static, 0, state2, posStateNext));\n                        optimum = this$static._optimum[cur + offset];\n                        if (curAndLenPrice < optimum.Price) {\n                            optimum.Price = curAndLenPrice;\n                            optimum.PosPrev = cur + lenTest + 1;\n                            optimum.BackPrev = 0;\n                            optimum.Prev1IsChar = 1;\n                            optimum.Prev2 = 1;\n                            optimum.PosPrev2 = cur;\n                            optimum.BackPrev2 = curBack + 4;\n                        }\n                    }\n                }\n                offs += 2;\n                if (offs == numDistancePairs)\n                    break;\n                }\n            }\n        }\n    }\n}\n\nfunction $GetPosLenPrice(this$static, pos, len, posState) {\n    var price, lenToPosState = GetLenToPosState(len);\n    if (pos < 128) {\n        price = this$static._distancesPrices[lenToPosState * 128 + pos];\n    } else {\n        price = this$static._posSlotPrices[(lenToPosState << 6) + GetPosSlot2(pos)] + this$static._alignPrices[pos & 15];\n    }\n    return price + $GetPrice(this$static._lenEncoder, len - 2, posState);\n}\n\nfunction $GetPureRepPrice(this$static, repIndex, state, posState) {\n    var price;\n    if (!repIndex) {\n        price = ProbPrices[this$static._isRepG0[state] >>> 2];\n        price += ProbPrices[2048 - this$static._isRep0Long[(state << 4) + posState] >>> 2];\n    } else {\n        price = ProbPrices[2048 - this$static._isRepG0[state] >>> 2];\n        if (repIndex == 1) {\n            price += ProbPrices[this$static._isRepG1[state] >>> 2];\n        } else {\n            price += ProbPrices[2048 - this$static._isRepG1[state] >>> 2];\n            price += GetPrice(this$static._isRepG2[state], repIndex - 2);\n        }\n    }\n    return price;\n}\n\nfunction $GetRepLen1Price(this$static, state, posState) {\n    return ProbPrices[this$static._isRepG0[state] >>> 2] + ProbPrices[this$static._isRep0Long[(state << 4) + posState] >>> 2];\n}\n\nfunction $Init_4(this$static) {\n    $BaseInit(this$static);\n    $Init_9(this$static._rangeEncoder);\n    InitBitModels(this$static._isMatch);\n    InitBitModels(this$static._isRep0Long);\n    InitBitModels(this$static._isRep);\n    InitBitModels(this$static._isRepG0);\n    InitBitModels(this$static._isRepG1);\n    InitBitModels(this$static._isRepG2);\n    InitBitModels(this$static._posEncoders);\n    $Init_3(this$static._literalEncoder);\n    for (var i = 0; i < 4; ++i) {\n        InitBitModels(this$static._posSlotEncoder[i].Models);\n    }\n    $Init_2(this$static._lenEncoder, 1 << this$static._posStateBits);\n    $Init_2(this$static._repMatchLenEncoder, 1 << this$static._posStateBits);\n    InitBitModels(this$static._posAlignEncoder.Models);\n    this$static._longestMatchWasFound = 0;\n    this$static._optimumEndIndex = 0;\n    this$static._optimumCurrentIndex = 0;\n    this$static._additionalOffset = 0;\n}\n\nfunction $MovePos(this$static, num) {\n    if (num > 0) {\n        $Skip(this$static._matchFinder, num);\n        this$static._additionalOffset += num;\n    }\n}\n\nfunction $ReadMatchDistances(this$static) {\n    var lenRes = 0;\n    this$static._numDistancePairs = $GetMatches(this$static._matchFinder, this$static._matchDistances);\n    if (this$static._numDistancePairs > 0) {\n        lenRes = this$static._matchDistances[this$static._numDistancePairs - 2];\n        if (lenRes == this$static._numFastBytes)\n        lenRes += $GetMatchLen(this$static._matchFinder, lenRes - 1, this$static._matchDistances[this$static._numDistancePairs - 1], 273 - lenRes);\n    }\n    this$static._additionalOffset += 1;\n    return lenRes;\n}\n\nfunction $ReleaseMFStream(this$static) {\n    if (this$static._matchFinder && this$static._needReleaseMFStream) {\n        this$static._matchFinder._stream = null;\n        this$static._needReleaseMFStream = 0;\n    }\n}\n\nfunction $ReleaseStreams(this$static) {\n    $ReleaseMFStream(this$static);\n    this$static._rangeEncoder.Stream = null;\n}\n\nfunction $SetDictionarySize_0(this$static, dictionarySize) {\n    this$static._dictionarySize = dictionarySize;\n    for (var dicLogSize = 0; dictionarySize > 1 << dicLogSize; ++dicLogSize) {}\n    this$static._distTableSize = dicLogSize * 2;\n}\n\nfunction $SetMatchFinder(this$static, matchFinderIndex) {\n    var matchFinderIndexPrev = this$static._matchFinderType;\n    this$static._matchFinderType = matchFinderIndex;\n    if (this$static._matchFinder && matchFinderIndexPrev != this$static._matchFinderType) {\n        this$static._dictionarySizePrev = -1;\n        this$static._matchFinder = null;\n    }\n}\n\nfunction $WriteCoderProperties(this$static, outStream) {\n    this$static.properties[0] = (this$static._posStateBits * 5 + this$static._numLiteralPosStateBits) * 9 + this$static._numLiteralContextBits << 24 >> 24;\n    for (var i = 0; i < 4; ++i) {\n        this$static.properties[1 + i] = this$static._dictionarySize >> 8 * i << 24 >> 24;\n    }\n    $write_0(outStream, this$static.properties, 0, 5);\n}\n\nfunction $WriteEndMarker(this$static, posState) {\n    //if (!this$static._writeEndMark) {\n    //    return;\n    //}\n    $Encode_3(this$static._rangeEncoder, this$static._isMatch, (this$static._state << 4) + posState, 1);\n    $Encode_3(this$static._rangeEncoder, this$static._isRep, this$static._state, 0);\n    this$static._state = this$static._state < 7?7:10;\n    $Encode_0(this$static._lenEncoder, this$static._rangeEncoder, 0, posState);\n    var lenToPosState = GetLenToPosState(2);\n    $Encode_2(this$static._posSlotEncoder[lenToPosState], this$static._rangeEncoder, 63);\n    $EncodeDirectBits(this$static._rangeEncoder, 67108863, 26);\n    $ReverseEncode(this$static._posAlignEncoder, this$static._rangeEncoder, 15);\n}\n\nfunction GetPosSlot(pos) {\n    if (pos < 2048) {\n        return g_FastPos[pos];\n    }\n    if (pos < 2097152) {\n        return g_FastPos[pos >> 10] + 20;\n    }\n    return g_FastPos[pos >> 20] + 40;\n}\n\nfunction GetPosSlot2(pos) {\n    if (pos < 131072) {\n        return g_FastPos[pos >> 6] + 12;\n    }\n    if (pos < 134217728) {\n        return g_FastPos[pos >> 16] + 32;\n    }\n    return g_FastPos[pos >> 26] + 52;\n}\n\nfunction $Encode(this$static, rangeEncoder, symbol, posState) {\n    if (symbol < 8) {\n        $Encode_3(rangeEncoder, this$static._choice, 0, 0);\n        $Encode_2(this$static._lowCoder[posState], rangeEncoder, symbol);\n    } else {\n        symbol -= 8;\n        $Encode_3(rangeEncoder, this$static._choice, 0, 1);\n        if (symbol < 8) {\n            $Encode_3(rangeEncoder, this$static._choice, 1, 0);\n            $Encode_2(this$static._midCoder[posState], rangeEncoder, symbol);\n        } else {\n            $Encode_3(rangeEncoder, this$static._choice, 1, 1);\n            $Encode_2(this$static._highCoder, rangeEncoder, symbol - 8);\n        }\n    }\n}\n\nfunction $Encoder$LenEncoder(this$static) {\n    this$static._choice = initDim(2);\n    this$static._lowCoder = initDim(16);\n    this$static._midCoder = initDim(16);\n    this$static._highCoder = $BitTreeEncoder({}, 8);\n    for (var posState = 0; posState < 16; ++posState) {\n        this$static._lowCoder[posState] = $BitTreeEncoder({}, 3);\n        this$static._midCoder[posState] = $BitTreeEncoder({}, 3);\n    }\n    return this$static;\n}\n\nfunction $Init_2(this$static, numPosStates) {\n    InitBitModels(this$static._choice);\n    for (var posState = 0; posState < numPosStates; ++posState) {\n        InitBitModels(this$static._lowCoder[posState].Models);\n        InitBitModels(this$static._midCoder[posState].Models);\n    }\n    InitBitModels(this$static._highCoder.Models);\n}\n\nfunction $SetPrices(this$static, posState, numSymbols, prices, st) {\n    var a0, a1, b0, b1, i;\n    a0 = ProbPrices[this$static._choice[0] >>> 2];\n    a1 = ProbPrices[2048 - this$static._choice[0] >>> 2];\n    b0 = a1 + ProbPrices[this$static._choice[1] >>> 2];\n    b1 = a1 + ProbPrices[2048 - this$static._choice[1] >>> 2];\n    i = 0;\n    for (i = 0; i < 8; ++i) {\n        if (i >= numSymbols)\n        return;\n        prices[st + i] = a0 + $GetPrice_1(this$static._lowCoder[posState], i);\n    }\n    for (; i < 16; ++i) {\n        if (i >= numSymbols)\n        return;\n        prices[st + i] = b0 + $GetPrice_1(this$static._midCoder[posState], i - 8);\n    }\n    for (; i < numSymbols; ++i) {\n        prices[st + i] = b1 + $GetPrice_1(this$static._highCoder, i - 8 - 8);\n    }\n}\n\nfunction $Encode_0(this$static, rangeEncoder, symbol, posState) {\n    $Encode(this$static, rangeEncoder, symbol, posState);\n    if ((this$static._counters[posState] -= 1) == 0) {\n        $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\n        this$static._counters[posState] = this$static._tableSize;\n    }\n}\n\nfunction $Encoder$LenPriceTableEncoder(this$static) {\n    $Encoder$LenEncoder(this$static);\n    this$static._prices = [];\n    this$static._counters = [];\n    return this$static;\n}\n\nfunction $GetPrice(this$static, symbol, posState) {\n    return this$static._prices[posState * 272 + symbol];\n}\n\nfunction $UpdateTables(this$static, numPosStates) {\n    for (var posState = 0; posState < numPosStates; ++posState) {\n        $SetPrices(this$static, posState, this$static._tableSize, this$static._prices, posState * 272);\n        this$static._counters[posState] = this$static._tableSize;\n    }\n}\n\nfunction $Create_1(this$static, numPosBits, numPrevBits) {\n    var i, numStates;\n    if (this$static.m_Coders != null && this$static.m_NumPrevBits == numPrevBits && this$static.m_NumPosBits == numPosBits) {\n        return;\n    }\n    this$static.m_NumPosBits = numPosBits;\n    this$static.m_PosMask = (1 << numPosBits) - 1;\n    this$static.m_NumPrevBits = numPrevBits;\n    numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n    this$static.m_Coders = initDim(numStates);\n    for (i = 0; i < numStates; ++i) {\n        this$static.m_Coders[i] = $Encoder$LiteralEncoder$Encoder2({});\n    }\n}\n\nfunction $GetSubCoder(this$static, pos, prevByte) {\n    return this$static.m_Coders[((pos & this$static.m_PosMask) << this$static.m_NumPrevBits) + ((prevByte & 255) >>> 8 - this$static.m_NumPrevBits)];\n}\n\nfunction $Init_3(this$static) {\n    var i, numStates = 1 << this$static.m_NumPrevBits + this$static.m_NumPosBits;\n    for (i = 0; i < numStates; ++i) {\n        InitBitModels(this$static.m_Coders[i].m_Encoders);\n    }\n}\n\nfunction $Encode_1(this$static, rangeEncoder, symbol) {\n    var bit, i, context = 1;\n    for (i = 7; i >= 0; --i) {\n        bit = symbol >> i & 1;\n        $Encode_3(rangeEncoder, this$static.m_Encoders, context, bit);\n        context = context << 1 | bit;\n    }\n}\n\nfunction $EncodeMatched(this$static, rangeEncoder, matchByte, symbol) {\n    var bit, i, matchBit, state, same = 1, context = 1;\n    for (i = 7; i >= 0; --i) {\n        bit = symbol >> i & 1;\n        state = context;\n        if (same) {\n            matchBit = matchByte >> i & 1;\n            state += 1 + matchBit << 8;\n            same = matchBit == bit;\n        }\n        $Encode_3(rangeEncoder, this$static.m_Encoders, state, bit);\n        context = context << 1 | bit;\n    }\n}\n\nfunction $Encoder$LiteralEncoder$Encoder2(this$static) {\n    this$static.m_Encoders = initDim(768);\n    return this$static;\n}\n\nfunction $GetPrice_0(this$static, matchMode, matchByte, symbol) {\n    var bit, context = 1, i = 7, matchBit, price = 0;\n    if (matchMode) {\n        for (; i >= 0; --i) {\n            matchBit = matchByte >> i & 1;\n            bit = symbol >> i & 1;\n            price += GetPrice(this$static.m_Encoders[(1 + matchBit << 8) + context], bit);\n            context = context << 1 | bit;\n            if (matchBit != bit) {\n                --i;\n                break;\n            }\n        }\n    }\n    for (; i >= 0; --i) {\n        bit = symbol >> i & 1;\n        price += GetPrice(this$static.m_Encoders[context], bit);\n        context = context << 1 | bit;\n    }\n    return price;\n}\n\nfunction $MakeAsChar(this$static) {\n    this$static.BackPrev = -1;\n    this$static.Prev1IsChar = 0;\n}\n\nfunction $MakeAsShortRep(this$static) {\n    this$static.BackPrev = 0;\n    this$static.Prev1IsChar = 0;\n}\n/** ce */\n/** ds */\nfunction $BitTreeDecoder(this$static, numBitLevels) {\n    this$static.NumBitLevels = numBitLevels;\n    this$static.Models = initDim(1 << numBitLevels);\n    return this$static;\n}\n\nfunction $Decode_0(this$static, rangeDecoder) {\n    var bitIndex, m = 1;\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0; bitIndex -= 1) {\n        m = (m << 1) + $DecodeBit(rangeDecoder, this$static.Models, m);\n    }\n    return m - (1 << this$static.NumBitLevels);\n}\n\nfunction $ReverseDecode(this$static, rangeDecoder) {\n    var bit, bitIndex, m = 1, symbol = 0;\n    for (bitIndex = 0; bitIndex < this$static.NumBitLevels; ++bitIndex) {\n        bit = $DecodeBit(rangeDecoder, this$static.Models, m);\n        m <<= 1;\n        m += bit;\n        symbol |= bit << bitIndex;\n    }\n    return symbol;\n}\n\nfunction ReverseDecode(Models, startIndex, rangeDecoder, NumBitLevels) {\n    var bit, bitIndex, m = 1, symbol = 0;\n    for (bitIndex = 0; bitIndex < NumBitLevels; ++bitIndex) {\n        bit = $DecodeBit(rangeDecoder, Models, startIndex + m);\n        m <<= 1;\n        m += bit;\n        symbol |= bit << bitIndex;\n    }\n    return symbol;\n}\n/** de */\n/** cs */\nfunction $BitTreeEncoder(this$static, numBitLevels) {\n    this$static.NumBitLevels = numBitLevels;\n    this$static.Models = initDim(1 << numBitLevels);\n    return this$static;\n}\n\nfunction $Encode_2(this$static, rangeEncoder, symbol) {\n    var bit, bitIndex, m = 1;\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\n        bitIndex -= 1;\n        bit = symbol >>> bitIndex & 1;\n        $Encode_3(rangeEncoder, this$static.Models, m, bit);\n        m = m << 1 | bit;\n    }\n}\n\nfunction $GetPrice_1(this$static, symbol) {\n    var bit, bitIndex, m = 1, price = 0;\n    for (bitIndex = this$static.NumBitLevels; bitIndex != 0;) {\n        bitIndex -= 1;\n        bit = symbol >>> bitIndex & 1;\n        price += GetPrice(this$static.Models[m], bit);\n        m = (m << 1) + bit;\n    }\n    return price;\n}\n\nfunction $ReverseEncode(this$static, rangeEncoder, symbol) {\n    var bit, i, m = 1;\n    for (i = 0; i < this$static.NumBitLevels; ++i) {\n        bit = symbol & 1;\n        $Encode_3(rangeEncoder, this$static.Models, m, bit);\n        m = m << 1 | bit;\n        symbol >>= 1;\n    }\n}\n\nfunction $ReverseGetPrice(this$static, symbol) {\n    var bit, i, m = 1, price = 0;\n    for (i = this$static.NumBitLevels; i != 0; i -= 1) {\n        bit = symbol & 1;\n        symbol >>>= 1;\n        price += GetPrice(this$static.Models[m], bit);\n        m = m << 1 | bit;\n    }\n    return price;\n}\n\nfunction ReverseEncode(Models, startIndex, rangeEncoder, NumBitLevels, symbol) {\n    var bit, i, m = 1;\n    for (i = 0; i < NumBitLevels; ++i) {\n        bit = symbol & 1;\n        $Encode_3(rangeEncoder, Models, startIndex + m, bit);\n        m = m << 1 | bit;\n        symbol >>= 1;\n    }\n}\n\nfunction ReverseGetPrice(Models, startIndex, NumBitLevels, symbol) {\n    var bit, i, m = 1, price = 0;\n    for (i = NumBitLevels; i != 0; i -= 1) {\n        bit = symbol & 1;\n        symbol >>>= 1;\n        price += ProbPrices[((Models[startIndex + m] - bit ^ -bit) & 2047) >>> 2];\n        m = m << 1 | bit;\n    }\n    return price;\n}\n/** ce */\n/** ds */\nfunction $DecodeBit(this$static, probs, index) {\n    var newBound, prob = probs[index];\n    newBound = (this$static.Range >>> 11) * prob;\n    if ((this$static.Code ^ -2147483648) < (newBound ^ -2147483648)) {\n        this$static.Range = newBound;\n        probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\n        if (!(this$static.Range & -16777216)) {\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n            this$static.Range <<= 8;\n        }\n        return 0;\n    } else {\n        this$static.Range -= newBound;\n        this$static.Code -= newBound;\n        probs[index] = prob - (prob >>> 5) << 16 >> 16;\n        if (!(this$static.Range & -16777216)) {\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n            this$static.Range <<= 8;\n        }\n        return 1;\n    }\n}\n\nfunction $DecodeDirectBits(this$static, numTotalBits) {\n    var i, t, result = 0;\n    for (i = numTotalBits; i != 0; i -= 1) {\n        this$static.Range >>>= 1;\n        t = this$static.Code - this$static.Range >>> 31;\n        this$static.Code -= this$static.Range & t - 1;\n        result = result << 1 | 1 - t;\n        if (!(this$static.Range & -16777216)) {\n            this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n            this$static.Range <<= 8;\n        }\n    }\n    return result;\n}\n\nfunction $Init_8(this$static) {\n    this$static.Code = 0;\n    this$static.Range = -1;\n    for (var i = 0; i < 5; ++i) {\n        this$static.Code = this$static.Code << 8 | $read(this$static.Stream);\n    }\n}\n/** de */\n\nfunction InitBitModels(probs) {\n    for (var i = probs.length - 1; i >= 0; --i) {\n        probs[i] = 1024;\n    }\n}\n/** cs */\nvar ProbPrices = (function () {\n    var end, i, j, start, ProbPrices = [];\n    for (i = 8; i >= 0; --i) {\n        start = 1;\n        start <<= 9 - i - 1;\n        end = 1;\n        end <<= 9 - i;\n        for (j = start; j < end; ++j) {\n            ProbPrices[j] = (i << 6) + (end - j << 6 >>> 9 - i - 1);\n        }\n    }\n    return ProbPrices;\n}());\n\nfunction $Encode_3(this$static, probs, index, symbol) {\n    var newBound, prob = probs[index];\n    newBound = (this$static.Range >>> 11) * prob;\n    if (!symbol) {\n        this$static.Range = newBound;\n        probs[index] = prob + (2048 - prob >>> 5) << 16 >> 16;\n    } else {\n        this$static.Low = add(this$static.Low, and(fromInt(newBound), [4294967295, 0]));\n        this$static.Range -= newBound;\n        probs[index] = prob - (prob >>> 5) << 16 >> 16;\n    }\n    if (!(this$static.Range & -16777216)) {\n        this$static.Range <<= 8;\n        $ShiftLow(this$static);\n    }\n}\n\nfunction $EncodeDirectBits(this$static, v, numTotalBits) {\n    for (var i = numTotalBits - 1; i >= 0; i -= 1) {\n        this$static.Range >>>= 1;\n        if ((v >>> i & 1) == 1) {\n            this$static.Low = add(this$static.Low, fromInt(this$static.Range));\n        }\n        if (!(this$static.Range & -16777216)) {\n            this$static.Range <<= 8;\n            $ShiftLow(this$static);\n        }\n    }\n}\n\nfunction $GetProcessedSizeAdd(this$static) {\n    return add(add(fromInt(this$static._cacheSize), this$static._position), [4, 0]);\n}\n\nfunction $Init_9(this$static) {\n    this$static._position = P0_longLit;\n    this$static.Low = P0_longLit;\n    this$static.Range = -1;\n    this$static._cacheSize = 1;\n    this$static._cache = 0;\n}\n\nfunction $ShiftLow(this$static) {\n    var temp, LowHi = lowBits_0(shru(this$static.Low, 32));\n    if (LowHi != 0 || compare(this$static.Low, [4278190080, 0]) < 0) {\n        this$static._position = add(this$static._position, fromInt(this$static._cacheSize));\n        temp = this$static._cache;\n        do {\n            $write(this$static.Stream, temp + LowHi);\n            temp = 255;\n        } while ((this$static._cacheSize -= 1) != 0);\n        this$static._cache = lowBits_0(this$static.Low) >>> 24;\n    }\n    this$static._cacheSize += 1;\n    this$static.Low = shl(and(this$static.Low, [16777215, 0]), 8);\n}\n\nfunction GetPrice(Prob, symbol) {\n    return ProbPrices[((Prob - symbol ^ -symbol) & 2047) >>> 2];\n}\n\n/** ce */\n/** ds */\nfunction decode(utf) {\n    var i = 0, j = 0, x, y, z, l = utf.length, buf = [], charCodes = [];\n    for (; i < l; ++i, ++j) {\n        x = utf[i] & 255;\n        if (!(x & 128)) {\n            if (!x) {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            charCodes[j] = x;\n        } else if ((x & 224) == 192) {\n            if (i + 1 >= l) {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            y = utf[++i] & 255;\n            if ((y & 192) != 128) {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            charCodes[j] = ((x & 31) << 6) | (y & 63);\n        } else if ((x & 240) == 224) {\n            if (i + 2 >= l) {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            y = utf[++i] & 255;\n            if ((y & 192) != 128) {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            z = utf[++i] & 255;\n            if ((z & 192) != 128) {\n                /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n                return utf;\n            }\n            charCodes[j] = ((x & 15) << 12) | ((y & 63) << 6) | (z & 63);\n        } else {\n            /// It appears that this is binary data, so it cannot be converted to a string, so just send it back.\n            return utf;\n        }\n        if (j == 16383) {\n            buf.push(String.fromCharCode.apply(String, charCodes));\n            j = -1;\n        }\n    }\n    if (j > 0) {\n        charCodes.length = j;\n        buf.push(String.fromCharCode.apply(String, charCodes));\n    }\n    return buf.join(\"\");\n}\n/** de */\n/** cs */\nfunction encode(s) {\n    var ch, chars = [], data, elen = 0, i, l = s.length;\n    /// Be able to handle binary arrays and buffers.\n    if (typeof s == \"object\") {\n        return s;\n    } else {\n        $getChars(s, 0, l, chars, 0);\n    }\n    /// Add extra spaces in the array to break up the unicode symbols.\n    for (i = 0; i < l; ++i) {\n        ch = chars[i];\n        if (ch >= 1 && ch <= 127) {\n            ++elen;\n        } else if (!ch || ch >= 128 && ch <= 2047) {\n            elen += 2;\n        } else {\n            elen += 3;\n        }\n    }\n    data = [];\n    elen = 0;\n    for (i = 0; i < l; ++i) {\n        ch = chars[i];\n        if (ch >= 1 && ch <= 127) {\n            data[elen++] = ch << 24 >> 24;\n        } else if (!ch || ch >= 128 && ch <= 2047) {\n            data[elen++] = (192 | ch >> 6 & 31) << 24 >> 24;\n            data[elen++] = (128 | ch & 63) << 24 >> 24;\n        } else {\n            data[elen++] = (224 | ch >> 12 & 15) << 24 >> 24;\n            data[elen++] = (128 | ch >> 6 & 63) << 24 >> 24;\n            data[elen++] = (128 | ch & 63) << 24 >> 24;\n        }\n    }\n    return data;\n}\n/** ce */\n\nfunction toDouble(a) {\n    return a[1] + a[0];\n}\n\n/** cs */\nexport function compress(str, mode, on_finish, on_progress) {\n    var this$static = {},\n        percent,\n        cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\n        sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\n    \n    if (typeof on_finish != \"function\") {\n        cbn = on_finish;\n        on_finish = on_progress = 0;\n    }\n    \n    on_progress = on_progress || function(percent) {\n        if (typeof cbn == \"undefined\")\n            return;\n        \n        return update_progress(percent, cbn);\n    };\n    \n    on_finish = on_finish || function(res, err) {\n        if (typeof cbn == \"undefined\")\n            return;\n        \n        return postMessage({\n            \"action\": action_compress,\n            \"cbn\": cbn,\n            \"result\": res,\n            \"error\": err\n        });\n    };\n\n    if (sync) {\n        this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\n        while ($processChunkEncode(this$static.c.chunker));\n        return $toByteArray(this$static.c.output);\n    }\n    \n    try {\n        this$static.c = $LZMAByteArrayCompressor({}, encode(str), get_mode_obj(mode));\n        \n        on_progress(0);\n    } catch (err) {\n        return on_finish(null, err);\n    }\n    \n    function do_action() {\n        try {\n            var res, start = (new Date()).getTime();\n            \n            while ($processChunkEncode(this$static.c.chunker)) {\n                percent = toDouble(this$static.c.chunker.inBytesProcessed) / toDouble(this$static.c.length_0);\n                /// If about 200 miliseconds have passed, update the progress.\n                if ((new Date()).getTime() - start > 200) {\n                    on_progress(percent);\n                    \n                    wait(do_action, 0);\n                    return 0;\n                }\n            }\n            \n            on_progress(1);\n            \n            res = $toByteArray(this$static.c.output);\n            \n            /// delay so we donât catch errors from the on_finish handler\n            wait(on_finish.bind(null, res), 0);\n        } catch (err) {\n            on_finish(null, err);\n        }\n    }\n    \n    ///NOTE: We need to wait to make sure it is always async.\n    wait(do_action, 0);\n}\n/** ce */\n/** ds */\nexport function decompress(byte_arr, on_finish, on_progress) {\n    var this$static = {},\n        percent,\n        cbn, /// A callback number should be supplied instead of on_finish() if we are using Web Workers.\n        has_progress,\n        len,\n        sync = typeof on_finish == \"undefined\" && typeof on_progress == \"undefined\";\n\n    if (typeof on_finish != \"function\") {\n        cbn = on_finish;\n        on_finish = on_progress = 0;\n    }\n    \n    on_progress = on_progress || function(percent) {\n        if (typeof cbn == \"undefined\")\n            return;\n        \n        return update_progress(has_progress ? percent : -1, cbn);\n    };\n    \n    on_finish = on_finish || function(res, err) {\n        if (typeof cbn == \"undefined\")\n            return;\n        \n        return postMessage({\n            \"action\": action_decompress,\n            \"cbn\": cbn,\n            \"result\": res,\n            \"error\": err\n        });\n    };\n\n    if (sync) {\n        this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\n        while ($processChunkDecode(this$static.d.chunker));\n        return decode($toByteArray(this$static.d.output));\n    }\n    \n    try {\n        this$static.d = $LZMAByteArrayDecompressor({}, byte_arr);\n        \n        len = toDouble(this$static.d.length_0);\n        \n        ///NOTE: If the data was created via a stream, it will not have a length value, and therefore we can't calculate the progress.\n        has_progress = len > -1;\n        \n        on_progress(0);\n    } catch (err) {\n        return on_finish(null, err);\n    }\n    \n    function do_action() {\n        try {\n            var res, i = 0, start = (new Date()).getTime();\n            while ($processChunkDecode(this$static.d.chunker)) {\n                if (++i % 1000 == 0 && (new Date()).getTime() - start > 200) {\n                    if (has_progress) {\n                        percent = toDouble(this$static.d.chunker.decoder.nowPos64) / len;\n                        /// If about 200 miliseconds have passed, update the progress.\n                        on_progress(percent);\n                    }\n                    \n                    ///NOTE: This allows other code to run, like the browser to update.\n                    wait(do_action, 0);\n                    return 0;\n                }\n            }\n            \n            on_progress(1);\n            \n            res = decode($toByteArray(this$static.d.output));\n            \n            /// delay so we donât catch errors from the on_finish handler\n            wait(on_finish.bind(null, res), 0);\n        } catch (err) {\n            on_finish(null, err);\n        }\n    }\n    \n    ///NOTE: We need to wait to make sure it is always async.\n    wait(do_action, 0);\n}\n/** de */\n/** cs */\nvar get_mode_obj = (function () {\n    /// s is dictionarySize\n    /// f is fb\n    /// m is matchFinder\n    ///NOTE: Because some values are always the same, they have been removed.\n    /// lc is always 3\n    /// lp is always 0\n    /// pb is always 2\n    var modes = [\n        {s: 16, f:  64, m: 0},\n        {s: 20, f:  64, m: 0},\n        {s: 19, f:  64, m: 1},\n        {s: 20, f:  64, m: 1},\n        {s: 21, f: 128, m: 1},\n        {s: 22, f: 128, m: 1},\n        {s: 23, f: 128, m: 1},\n        {s: 24, f: 255, m: 1},\n        {s: 25, f: 255, m: 1}\n    ];\n    \n    return function (mode) {\n        return modes[mode - 1] || modes[6];\n    };\n}());\n/** ce */\n","import { decompress, action_decompress } from \"./lzma-algo\";\n\nexport { decompress };\n\nexport function LZMA() {}\nLZMA[\"decompress\"] = decompress;\nLZMA.prototype[\"decompress\"] = decompress;\n\nif (typeof self != \"undefined\" && 'importScripts' in self) {\n    addEventListener(\"message\", function (e) {\n        if (e[\"data\"][\"action\"] == action_decompress) {\n            decompress(e[\"data\"][\"data\"], e[\"data\"][\"cbn\"]);\n        }\n    });\n}\n"],"names":[],"mappings":";;;;;;IAAA;IAmBO,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAI,eAAe,GAAG,CAAC,CAAC;AAC/B;AACG,QAAC,IAAI,GAAG,OAAO,YAAY,IAAI,UAAU,GAAG,YAAY,GAAG,UAAU,CAAC;IACzE,IAAI,YAAY,GAAG,UAAU,CAAC;IAC9B,IAAI,UAAU,GAAG,CAAC,UAAU,EAAE,CAAC,YAAY,CAAC,CAAC;IAC7C,IAEI;IACJ,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;AACxB;IACA,SAAS,eAAe,CAAC,OAAO,EAAE,GAAG,EAAE;IACvC,IAAI,WAAW,CAAC;IAChB,QAAQ,QAAQ,EAAE,eAAe;IACjC,QAAQ,KAAK,EAAE,GAAG;IAClB,QAAQ,QAAQ,EAAE,OAAO;IACzB,KAAK,CAAC,CAAC;IACP,CAAC;AACD;IACA,SAAS,OAAO,CAAC,GAAG,EAAE;IACtB;IACA,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;IACf,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC3B,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;AACD;IACA,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;IACnB,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IAMD;AACA;IACA,SAAS,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE;IACvB,IAAI,IAAI,IAAI,EAAE,IAAI,CAAC;IACnB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACtC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpB,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;IACvB,QAAQ,OAAO,CAAC,CAAC,CAAC;IAClB,KAAK;IACL,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;IACvB,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;IAC1B,QAAQ,OAAO,CAAC,CAAC,CAAC;IAClB,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;AACD;IACA,SAAS,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE;IACrC,IAAI,IAAI,QAAQ,EAAE,OAAO,CAAC;IAC1B,IAAI,SAAS,IAAI,qBAAqB,CAAC;IACvC,IAAI,QAAQ,IAAI,qBAAqB,CAAC;IACtC,IAAI,QAAQ,GAAG,SAAS,GAAG,YAAY,CAAC;IACxC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC,GAAG,YAAY,CAAC;IACjE,IAAI,SAAS,GAAG,SAAS,GAAG,QAAQ,GAAG,OAAO,CAAC;IAC/C,IAAI,QAAQ,GAAG,QAAQ,GAAG,OAAO,GAAG,QAAQ,CAAC;IAC7C,IAAI,OAAO,QAAQ,GAAG,CAAC,EAAE;IACzB,QAAQ,QAAQ,IAAI,YAAY,CAAC;IACjC,QAAQ,SAAS,IAAI,YAAY,CAAC;IAClC,KAAK;IACL,IAAI,OAAO,QAAQ,GAAG,UAAU,EAAE;IAClC,QAAQ,QAAQ,IAAI,YAAY,CAAC;IACjC,QAAQ,SAAS,IAAI,YAAY,CAAC;IAClC,KAAK;IACL,IAAI,SAAS,GAAG,SAAS,GAAG,qBAAqB,CAAC;IAClD,IAAI,OAAO,SAAS,GAAG,mBAAmB,EAAE;IAC5C,QAAQ,SAAS,IAAI,qBAAqB,CAAC;IAC3C,KAAK;IACL,IAAI,OAAO,SAAS,GAAG,CAAC,mBAAmB,EAAE;IAC7C,QAAQ,SAAS,IAAI,qBAAqB,CAAC;IAC3C,KAAK;IACL,IAAI,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACjC,CAAC;IAMD;IACA,SAAS,OAAO,CAAC,KAAK,EAAE;IACxB,IAAI,IAAI,KAAK,IAAI,CAAC,EAAE;IACpB,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1B,KAAK,MAAM;IACX,QAAQ,OAAO,CAAC,KAAK,GAAG,YAAY,EAAE,CAAC,YAAY,CAAC,CAAC;IACrD,KAAK;IACL,CAAC;AACD;IACA,SAAS,SAAS,CAAC,CAAC,EAAE;IACtB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;IAC5B,QAAQ,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,EAAE,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IAClF,KAAK,MAAM;IACX,QAAQ,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IACnE,KAAK;IACL,CAAC;AA4DD;IACA;AACA;IACA,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;IACnB,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;AACD;IACA,SAAS,qBAAqB,CAAC,WAAW,EAAE,GAAG,EAAE;IACjD,IAAI,WAAW,CAAC,GAAG,GAAG,GAAG,CAAC;IAC1B,IAAI,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC;IACxB,IAAI,WAAW,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC;IACnC,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AACD;IACA;IACA,SAAS,KAAK,CAAC,WAAW,EAAE;IAC5B,IAAI,IAAI,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,KAAK;IAC5C,QAAQ,OAAO,CAAC,CAAC,CAAC;IAClB,IAAI,OAAO,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IACpD,CAAC;IAWD;AACA;IACA,SAAS,sBAAsB,CAAC,WAAW,EAAE;IAC7C,IAAI,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IAClC,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1B,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AACD;IACA,SAAS,YAAY,CAAC,WAAW,EAAE;IACnC,IAAI,IAAI,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC;IAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC;IACpC,IAAI,OAAO,IAAI,CAAC;IAChB,CAAC;IAMD;AACA;IACA,SAAS,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,IAAI,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,GAAG,EAAE,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACjE,IAAI,WAAW,CAAC,KAAK,IAAI,GAAG,CAAC;IAC7B,CAAC;IASD;AACA;IACA,SAAS,SAAS,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE;IACpD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IAClC,QAAQ,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5C,KAAK;IACL,CAAC;IAqCD;AACA;IACA;IACA,SAAS,OAAO,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE;IAC7C,IAAI,IAAI,OAAO;IACf,QAAQ,UAAU,GAAG,EAAE;IACvB,QAAQ,CAAC;IACT,QAAQ,UAAU,GAAG,EAAE;IACvB,QAAQ,CAAC;IACT,QAAQ,UAAU,CAAC;IACnB;IACA,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5B,QAAQ,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,YAAY,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC/C,QAAQ,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IACtC,KAAK;IACL;IACA,IAAI,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3B,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;IACrD,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC3C,KAAK;IACL,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;IAChC,QAAQ,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,YAAY,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC/C,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3B,QAAQ,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IACvC,QAAQ,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC;IACzC,KAAK;IACL;IACA;IACA,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;IACvC;IACA,QAAQ,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC1C,KAAK,MAAM;IACX;IACA,QAAQ,UAAU,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC9C;IACA,QAAQ,IAAI,UAAU,GAAG,UAAU,EAAE;IACrC,YAAY,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC9C,SAAS,MAAM;IACf,YAAY,WAAW,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IACvD,SAAS;IACT,KAAK;IACL;IACA,IAAI,WAAW,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;IACtF,CAAC;AACD;IACA,SAAS,0BAA0B,CAAC,WAAW,EAAE,IAAI,EAAE;IACvD,IAAI,WAAW,CAAC,MAAM,GAAG,sBAAsB,CAAC,EAAE,CAAC,CAAC;IACpD,IAAI,OAAO,CAAC,WAAW,EAAE,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;IAC9E,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AA8FD;IACA,IAAI,QAAQ,IAAI,YAAY;IAC5B,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,GAAG,EAAE,CAAC;IAC/B,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IAC9B,QAAQ,CAAC,GAAG,CAAC,CAAC;IACd,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;IAC9B,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1B,YAAY,CAAC,MAAM,CAAC,CAAC;IACrB,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC;IAC5B,SAAS,MAAM;IACf,YAAY,CAAC,MAAM,CAAC,CAAC;IACrB,SAAS;IACT,QAAQ,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxB,KAAK;IACL,IAAI,OAAO,QAAQ,CAAC;IACpB,CAAC,EAAE,CAAC,CAAC;AAyQL;IACA;IACA;IACA,SAAS,UAAU,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,EAAE;IAChD,IAAI,IAAI,GAAG,GAAG,WAAW,CAAC,IAAI,GAAG,QAAQ,GAAG,CAAC,CAAC;IAC9C,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE;IACjB,QAAQ,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC;IACvC,KAAK;IACL,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;IAC/B,QAAQ,IAAI,GAAG,IAAI,WAAW,CAAC,WAAW,EAAE;IAC5C,YAAY,GAAG,GAAG,CAAC,CAAC;IACpB,SAAS;IACT,QAAQ,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACzE,QAAQ,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC;IAC9B,QAAQ,GAAG,IAAI,CAAC,CAAC;IACjB,QAAQ,IAAI,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,WAAW,EAAE;IACzD,YAAY,QAAQ,CAAC,WAAW,CAAC,CAAC;IAClC,SAAS;IACT,KAAK;IACL,CAAC;AACD;IACA,SAAS,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE;IAC5C,IAAI,IAAI,WAAW,CAAC,OAAO,IAAI,IAAI,IAAI,WAAW,CAAC,WAAW,IAAI,UAAU,EAAE;IAC9E,QAAQ,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IAClD,KAAK;IACL,IAAI,WAAW,CAAC,WAAW,GAAG,UAAU,CAAC;IACzC,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC;IAC/B,CAAC;AACD;IACA,SAAS,QAAQ,CAAC,WAAW,EAAE;IAC/B,IAAI,IAAI,IAAI,GAAG,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,UAAU,CAAC;IACzD,IAAI,IAAI,CAAC,IAAI,EAAE;IACf,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACrF,IAAI,IAAI,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,WAAW,EAAE;IACrD,QAAQ,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IAC7B,KAAK;IACL,IAAI,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC;IAC9C,CAAC;AACD;IACA,SAAS,QAAQ,CAAC,WAAW,EAAE,QAAQ,EAAE;IACzC,IAAI,IAAI,GAAG,GAAG,WAAW,CAAC,IAAI,GAAG,QAAQ,GAAG,CAAC,CAAC;IAC9C,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE;IACjB,QAAQ,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC;IACvC,KAAK;IACL,IAAI,OAAO,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;AACD;IACA,SAAS,QAAQ,CAAC,WAAW,EAAE,CAAC,EAAE;IAClC,IAAI,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9C,IAAI,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC;IAC1B,IAAI,IAAI,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,WAAW,EAAE;IACrD,QAAQ,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC9B,KAAK;IACL,CAAC;AACD;IACA,SAAS,cAAc,CAAC,WAAW,EAAE;IACrC,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;IAC1B,IAAI,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;IAC/B,CAAC;IACD;AACA;IACA,SAAS,gBAAgB,CAAC,GAAG,EAAE;IAC/B,IAAI,GAAG,IAAI,CAAC,CAAC;IACb,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE;IACjB,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;AACD;IACA,SAAS,eAAe,CAAC,KAAK,EAAE;IAChC,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;IACnB,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,KAAK,GAAG,EAAE,EAAE;IACpB,QAAQ,OAAO,KAAK,GAAG,CAAC,CAAC;IACzB,KAAK;IACL,IAAI,OAAO,KAAK,GAAG,CAAC,CAAC;IACrB,CAAC;IASD;IACA;IACA,SAAS,QAAQ,CAAC,WAAW,EAAE,OAAO,EAAE;IACxC,IAAI,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;IAClC,IAAI,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;IAC/B,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1B,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;IACD;AACA;IACA;IACA,SAAS,mBAAmB,CAAC,WAAW,EAAE;IAC1C,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;IAC5B,QAAQ,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;IACrC,KAAK;IACL;IACA,IAAI,IAAI,WAAW,CAAC,OAAO,EAAE;IAC7B,QAAQ,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;IACvC,KAAK,MAAM;IACX,QAAQ,oBAAoB,CAAC,WAAW,CAAC,CAAC;IAC1C,KAAK;IACL,IAAI,OAAO,WAAW,CAAC,KAAK,CAAC;IAC7B,CAAC;AACD;IACA,SAAS,oBAAoB,CAAC,WAAW,EAAE;IAC3C,IAAI,IAAI,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,IAAI,MAAM,IAAI,CAAC,CAAC,EAAE;IACtB,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC3C,KAAK;IACL,IAAI,WAAW,CAAC,gBAAgB,GAAG,UAAU,CAAC;IAC9C,IAAI,WAAW,CAAC,iBAAiB,GAAG,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC;IACjE,IAAI,IAAI,MAAM,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IACpJ,QAAQ,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAClD,QAAQ,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACxD,QAAQ,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC;IACzD,QAAQ,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;IAC9B,KAAK;IACL,CAAC;IAwBD;AACA;IACA;IACA,SAAS,aAAa,CAAC,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE;IAClE,IAAI,WAAW,CAAC,cAAc,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjD,IAAI,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC5C,IAAI,WAAW,CAAC,WAAW,CAAC,OAAO,GAAG,SAAS,CAAC;IAChD,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1B,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;IAClC,IAAI,WAAW,CAAC,QAAQ,GAAG,UAAU,CAAC;IACtC,IAAI,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC7B,IAAI,OAAO,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IACrC,CAAC;AACD;IACA,SAAS,aAAa,CAAC,WAAW,EAAE;IACpC,IAAI,IAAI,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC;IAClE,IAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,cAAc,CAAC;IAC5E,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,EAAE;IACrH,QAAQ,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,gBAAgB,EAAE,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;IACpH,QAAQ,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,EAAE;IACnC,YAAY,WAAW,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;IACvF,SAAS,MAAM;IACf,YAAY,WAAW,CAAC,QAAQ,GAAG,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IACnJ,SAAS;IACT,QAAQ,QAAQ,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;IAChE,QAAQ,WAAW,CAAC,KAAK,GAAG,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC/D,QAAQ,WAAW,CAAC,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACrE,KAAK,MAAM;IACX,QAAQ,IAAI,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,eAAe,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE;IACpG,YAAY,GAAG,GAAG,CAAC,CAAC;IACpB,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,iBAAiB,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE;IAC3G,gBAAgB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,oBAAoB,EAAE,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,EAAE;IACpI,oBAAoB,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnE,oBAAoB,GAAG,GAAG,CAAC,CAAC;IAC5B,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,iBAAiB,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE;IAC/G,oBAAoB,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;IAChD,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,iBAAiB,EAAE,WAAW,CAAC,KAAK,CAAC,EAAE;IACnH,wBAAwB,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;IACpD,qBAAqB,MAAM;IAC3B,wBAAwB,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC;IACpD,wBAAwB,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAC5D,qBAAqB;IACrB,oBAAoB,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IACxD,iBAAiB;IACjB,gBAAgB,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IACpD,gBAAgB,WAAW,CAAC,IAAI,GAAG,QAAQ,CAAC;IAC5C,aAAa;IACb,YAAY,IAAI,CAAC,GAAG,EAAE;IACtB,gBAAgB,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,eAAe,EAAE,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IACrG,gBAAgB,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/D,aAAa;IACb,SAAS,MAAM;IACf,YAAY,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAChD,YAAY,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAChD,YAAY,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAChD,YAAY,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC9F,YAAY,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3D,YAAY,OAAO,GAAG,SAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;IACjH,YAAY,IAAI,OAAO,IAAI,CAAC,EAAE;IAC9B,gBAAgB,aAAa,GAAG,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,gBAAgB,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC,KAAK,aAAa,CAAC;IACtE,gBAAgB,IAAI,OAAO,GAAG,EAAE,EAAE;IAClC,oBAAoB,WAAW,CAAC,IAAI,IAAI,aAAa,CAAC,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC,EAAE,WAAW,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IAC5J,iBAAiB,MAAM;IACvB,oBAAoB,WAAW,CAAC,IAAI,IAAI,iBAAiB,CAAC,WAAW,CAAC,cAAc,EAAE,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IAC9G,oBAAoB,WAAW,CAAC,IAAI,IAAI,cAAc,CAAC,WAAW,CAAC,iBAAiB,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;IAClH,oBAAoB,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,EAAE;IAC9C,wBAAwB,IAAI,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE;IACpD,4BAA4B,OAAO,CAAC,CAAC;IACrC,yBAAyB;IACzB,wBAAwB,OAAO,CAAC,CAAC,CAAC;IAClC,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;IACb,gBAAgB,WAAW,CAAC,IAAI,GAAG,OAAO,CAAC;IAC3C,SAAS;IACT,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,qBAAqB,EAAE;IACpI,YAAY,OAAO,CAAC,CAAC,CAAC;IACtB,SAAS;IACT,QAAQ,UAAU,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACnE,QAAQ,WAAW,CAAC,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IACvE,QAAQ,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IACpE,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;AACD;IACA,SAAS,QAAQ,CAAC,WAAW,EAAE;IAC/B,IAAI,WAAW,CAAC,WAAW,GAAG,EAAE,CAAC;IACjC,IAAI,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;IACpC,IAAI,WAAW,CAAC,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IACjD,IAAI,WAAW,CAAC,eAAe,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,WAAW,CAAC,iBAAiB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IAChD,IAAI,WAAW,CAAC,iBAAiB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IAChD,IAAI,WAAW,CAAC,iBAAiB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IAChD,IAAI,WAAW,CAAC,oBAAoB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IACpD,IAAI,WAAW,CAAC,gBAAgB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,WAAW,CAAC,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAI,WAAW,CAAC,iBAAiB,GAAG,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,IAAI,WAAW,CAAC,YAAY,GAAG,mBAAmB,CAAC,EAAE,CAAC,CAAC;IACvD,IAAI,WAAW,CAAC,eAAe,GAAG,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC1D,IAAI,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;IACtC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChC,QAAQ,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACjE,KAAK;IACL,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AACD;IACA,SAAS,OAAO,CAAC,WAAW,EAAE;IAC9B,IAAI,WAAW,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC;IAC3C,IAAI,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACrC,IAAI,aAAa,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACjD,IAAI,aAAa,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;IACpD,IAAI,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;IAC/C,IAAI,aAAa,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACjD,IAAI,aAAa,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACjD,IAAI,aAAa,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACjD,IAAI,aAAa,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC7C,IAAI,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAC1C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChC,QAAQ,aAAa,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC9D,KAAK;IACL,IAAI,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IACpC,IAAI,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;IACvC,IAAI,aAAa,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACxD,IAAI,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IACxC,CAAC;AACD;IACA,SAAS,qBAAqB,CAAC,WAAW,EAAE,UAAU,EAAE;IACxD,IAAI,IAAI,cAAc,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC;IACtD,IAAI,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC;IAC7B,QAAQ,OAAO,CAAC,CAAC;IACjB,IAAI,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAC9B,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;IACjB,IAAI,SAAS,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IAC5B,IAAI,EAAE,GAAG,SAAS,GAAG,CAAC,CAAC;IACvB,IAAI,EAAE,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;IAC3B,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5B,QAAQ,cAAc,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7D,KAAK;IACL;IACA,IAAI,IAAI,cAAc,GAAG,QAAQ,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE;IAC3E,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,OAAO,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC3D,CAAC;AACD;IACA,SAAS,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE;IACzD,IAAI,IAAI,cAAc,GAAG,CAAC,EAAE;IAC5B,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,WAAW,CAAC,gBAAgB,IAAI,cAAc,EAAE;IACxD,QAAQ,WAAW,CAAC,gBAAgB,GAAG,cAAc,CAAC;IACtD,QAAQ,WAAW,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IACtF,QAAQ,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9F,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;AACD;IACA,SAAS,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAC7C,IAAI,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;IACpC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,SAAS,CAAC,WAAW,CAAC,gBAAgB,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACpD,IAAI,IAAI,YAAY,GAAG,CAAC,IAAI,EAAE,CAAC;IAC/B,IAAI,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACpD,IAAI,OAAO,CAAC,WAAW,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;IACvD,IAAI,WAAW,CAAC,cAAc,GAAG,YAAY,GAAG,CAAC,CAAC;IAClD,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;AACD;IACA,SAAS,OAAO,CAAC,WAAW,EAAE,YAAY,EAAE;IAC5C,IAAI,OAAO,WAAW,CAAC,cAAc,GAAG,YAAY,EAAE,WAAW,CAAC,cAAc,IAAI,CAAC,EAAE;IACvF,QAAQ,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACpF,QAAQ,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACpF,KAAK;IACL,CAAC;AACD;IACA,SAAS,OAAO,CAAC,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE;IACtD,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;IAC5D,QAAQ,OAAO,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,CAAC;IACzE,KAAK;IACL,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;IACnB,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;IAC5D,QAAQ,MAAM,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,CAAC;IAC5E,KAAK,MAAM;IACX,QAAQ,MAAM,IAAI,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACvE,KAAK;IACL,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;AACD;IACA,SAAS,mBAAmB,CAAC,WAAW,EAAE;IAC1C,IAAI,WAAW,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACtC,IAAI,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,IAAI,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,IAAI,WAAW,CAAC,WAAW,GAAG,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACrD,IAAI,WAAW,CAAC,cAAc,GAAG,CAAC,CAAC;IACnC,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AACD;IACA,SAAS,KAAK,CAAC,WAAW,EAAE;IAC5B,IAAI,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACxC,IAAI,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,WAAW,CAAC,cAAc,EAAE,EAAE,QAAQ,EAAE;IAC9E,QAAQ,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAC/D,QAAQ,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAC/D,KAAK;IACL,IAAI,aAAa,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;AACD;AACA;IACA,SAAS,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;IACzD,IAAI,IAAI,CAAC,EAAE,SAAS,CAAC;IACrB,IAAI,IAAI,WAAW,CAAC,QAAQ,IAAI,IAAI,IAAI,WAAW,CAAC,aAAa,IAAI,WAAW,IAAI,WAAW,CAAC,YAAY,IAAI,UAAU;IAC1H,QAAQ,OAAO;IACf,IAAI,WAAW,CAAC,YAAY,GAAG,UAAU,CAAC;IAC1C,IAAI,WAAW,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,CAAC,CAAC;IAClD,IAAI,WAAW,CAAC,aAAa,GAAG,WAAW,CAAC;IAC5C,IAAI,SAAS,GAAG,CAAC,IAAI,WAAW,CAAC,aAAa,GAAG,WAAW,CAAC,YAAY,CAAC;IAC1E,IAAI,WAAW,CAAC,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAC9C,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC;IAClC,QAAQ,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,gCAAgC,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC;AACD;IACA,SAAS,WAAW,CAAC,WAAW,EAAE,GAAG,EAAE,QAAQ,EAAE;IACjD,IAAI,OAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,WAAW,CAAC,SAAS,KAAK,WAAW,CAAC,aAAa,KAAK,CAAC,QAAQ,GAAG,GAAG,MAAM,CAAC,GAAG,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;IACrJ,CAAC;AACD;IACA,SAAS,OAAO,CAAC,WAAW,EAAE;IAC9B,IAAI,IAAI,CAAC,EAAE,SAAS,CAAC;IACrB,IAAI,SAAS,GAAG,CAAC,IAAI,WAAW,CAAC,aAAa,GAAG,WAAW,CAAC,YAAY,CAAC;IAC1E,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;IACpC,QAAQ,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC1D,KAAK;IACL,CAAC;AACD;AACA;IACA,SAAS,aAAa,CAAC,WAAW,EAAE,YAAY,EAAE;IAClD,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;IACnB,IAAI,GAAG;IACP,QAAQ,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACxF,KAAK,QAAQ,MAAM,GAAG,GAAG,EAAE;IAC3B,IAAI,OAAO,MAAM,IAAI,EAAE,IAAI,EAAE,CAAC;IAC9B,CAAC;AACD;IACA,SAAS,oBAAoB,CAAC,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE;IACpE,IAAI,IAAI,GAAG,EAAE,QAAQ,EAAE,MAAM,GAAG,CAAC,CAAC;IAClC,IAAI,GAAG;IACP,QAAQ,QAAQ,GAAG,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,QAAQ,SAAS,KAAK,CAAC,CAAC;IACxB,QAAQ,GAAG,GAAG,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,GAAG,QAAQ,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC;IAC7F,QAAQ,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,GAAG,CAAC;IACnC,QAAQ,IAAI,QAAQ,IAAI,GAAG,EAAE;IAC7B,YAAY,OAAO,MAAM,GAAG,GAAG,EAAE;IACjC,gBAAgB,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAChG,aAAa;IACb,QAAQ,MAAM;IACd,SAAS;IACT,KAAK,QAAQ,MAAM,GAAG,GAAG,EAAE;IAC3B,IAAI,OAAO,MAAM,IAAI,EAAE,IAAI,EAAE,CAAC;IAC9B,CAAC;AACD;IACA,SAAS,gCAAgC,CAAC,WAAW,EAAE;IACvD,IAAI,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AACD;IACA;IACA;IACA,IAAI,SAAS,IAAI,YAAY;IAC7B,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,IAAI,KAAK,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE;IAClD;IACA,QAAQ,IAAI,CAAC,GAAG,QAAQ,CAAC;IACzB,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChB,QAAQ,CAAC,IAAI,CAAC,CAAC;IACf,QAAQ,CAAC,GAAG,CAAC,CAAC;IACd,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;IACpC,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,IAAI,EAAE,IAAI,EAAE,CAAC;IAChD,KAAK;IACL,IAAI,OAAO,SAAS,CAAC;IACrB,CAAC,EAAE,CAAC,CAAC;IA48BL;IACA;IACA,SAAS,eAAe,CAAC,WAAW,EAAE,YAAY,EAAE;IACpD,IAAI,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC;IAC5C,IAAI,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC;IACpD,IAAI,OAAO,WAAW,CAAC;IACvB,CAAC;AACD;IACA,SAAS,SAAS,CAAC,WAAW,EAAE,YAAY,EAAE;IAC9C,IAAI,IAAI,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;IACxB,IAAI,KAAK,QAAQ,GAAG,WAAW,CAAC,YAAY,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,CAAC,EAAE;IAC5E,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACvE,KAAK;IACL,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;AACD;IACA,SAAS,cAAc,CAAC,WAAW,EAAE,YAAY,EAAE;IACnD,IAAI,IAAI,GAAG,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,WAAW,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE;IACxE,QAAQ,GAAG,GAAG,UAAU,CAAC,YAAY,EAAE,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC9D,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChB,QAAQ,CAAC,IAAI,GAAG,CAAC;IACjB,QAAQ,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC;IAClC,KAAK;IACL,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;AACD;IACA,SAAS,aAAa,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE;IACvE,IAAI,IAAI,GAAG,EAAE,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,YAAY,EAAE,EAAE,QAAQ,EAAE;IAC5D,QAAQ,GAAG,GAAG,UAAU,CAAC,YAAY,EAAE,MAAM,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;IAC/D,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChB,QAAQ,CAAC,IAAI,GAAG,CAAC;IACjB,QAAQ,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC;IAClC,KAAK;IACL,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;IAuED;IACA;IACA,SAAS,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE;IAC/C,IAAI,IAAI,QAAQ,EAAE,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACtC,IAAI,QAAQ,GAAG,CAAC,WAAW,CAAC,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC;IACjD,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,UAAU,KAAK,QAAQ,GAAG,CAAC,UAAU,CAAC,EAAE;IACrE,QAAQ,WAAW,CAAC,KAAK,GAAG,QAAQ,CAAC;IACrC,QAAQ,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IAC9D,QAAQ,IAAI,EAAE,WAAW,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,EAAE;IAC9C,YAAY,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACjF,YAAY,WAAW,CAAC,KAAK,KAAK,CAAC,CAAC;IACpC,SAAS;IACT,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK,MAAM;IACX,QAAQ,WAAW,CAAC,KAAK,IAAI,QAAQ,CAAC;IACtC,QAAQ,WAAW,CAAC,IAAI,IAAI,QAAQ,CAAC;IACrC,QAAQ,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IACvD,QAAQ,IAAI,EAAE,WAAW,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,EAAE;IAC9C,YAAY,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACjF,YAAY,WAAW,CAAC,KAAK,KAAK,CAAC,CAAC;IACpC,SAAS;IACT,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,CAAC;AACD;IACA,SAAS,iBAAiB,CAAC,WAAW,EAAE,YAAY,EAAE;IACtD,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;IACzB,IAAI,KAAK,CAAC,GAAG,YAAY,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;IAC3C,QAAQ,WAAW,CAAC,KAAK,MAAM,CAAC,CAAC;IACjC,QAAQ,CAAC,GAAG,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,KAAK,KAAK,EAAE,CAAC;IACxD,QAAQ,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IACtD,QAAQ,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,QAAQ,IAAI,EAAE,WAAW,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,EAAE;IAC9C,YAAY,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACjF,YAAY,WAAW,CAAC,KAAK,KAAK,CAAC,CAAC;IACpC,SAAS;IACT,KAAK;IACL,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;AACD;IACA,SAAS,OAAO,CAAC,WAAW,EAAE;IAC9B,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;IACzB,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAC3B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;IAChC,QAAQ,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC7E,KAAK;IACL,CAAC;IACD;AACA;IACA,SAAS,aAAa,CAAC,KAAK,EAAE;IAC9B,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;IAChD,QAAQ,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACxB,KAAK;IACL,CAAC;IACD;IACA,IAAI,UAAU,IAAI,YAAY;IAC9B,IAAI,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,GAAG,EAAE,CAAC;IAC1C,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;IAC7B,QAAQ,KAAK,GAAG,CAAC,CAAC;IAClB,QAAQ,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5B,QAAQ,GAAG,GAAG,CAAC,CAAC;IAChB,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IACtB,QAAQ,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IACtC,YAAY,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACpE,SAAS;IACT,KAAK;IACL,IAAI,OAAO,UAAU,CAAC;IACtB,CAAC,EAAE,CAAC,CAAC;AA8DL;IACA;IACA;IACA,SAAS,MAAM,CAAC,GAAG,EAAE;IACrB,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,EAAE,SAAS,GAAG,EAAE,CAAC;IACxE,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5B,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACzB,QAAQ,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE;IACxB,YAAY,IAAI,CAAC,CAAC,EAAE;IACpB;IACA,gBAAgB,OAAO,GAAG,CAAC;IAC3B,aAAa;IACb,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,SAAS,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,EAAE;IACrC,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IAC5B;IACA,gBAAgB,OAAO,GAAG,CAAC;IAC3B,aAAa;IACb,YAAY,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,YAAY,IAAI,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,EAAE;IAClC;IACA,gBAAgB,OAAO,GAAG,CAAC;IAC3B,aAAa;IACb,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACtD,SAAS,MAAM,IAAI,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,EAAE;IACrC,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IAC5B;IACA,gBAAgB,OAAO,GAAG,CAAC;IAC3B,aAAa;IACb,YAAY,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,YAAY,IAAI,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,EAAE;IAClC;IACA,gBAAgB,OAAO,GAAG,CAAC;IAC3B,aAAa;IACb,YAAY,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAC/B,YAAY,IAAI,CAAC,CAAC,GAAG,GAAG,KAAK,GAAG,EAAE;IAClC;IACA,gBAAgB,OAAO,GAAG,CAAC;IAC3B,aAAa;IACb,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACzE,SAAS,MAAM;IACf;IACA,YAAY,OAAO,GAAG,CAAC;IACvB,SAAS;IACT,QAAQ,IAAI,CAAC,IAAI,KAAK,EAAE;IACxB,YAAY,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;IACnE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACnB,SAAS;IACT,KAAK;IACL,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;IACf,QAAQ,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7B,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;IAC/D,KAAK;IACL,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC;IAuCD;AACA;IACA,SAAS,QAAQ,CAAC,CAAC,EAAE;IACrB,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IA4ED;IACA;IACO,SAAS,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE;IAC7D,IAAI,IAAI,WAAW,GAAG,EAAE;IACxB,QAAQ,OAAO;IACf,QAAQ,GAAG;IACX,QAAQ,YAAY;IACpB,QAAQ,GAAG;IACX,QAAQ,IAAI,GAAG,OAAO,SAAS,IAAI,WAAW,IAAI,OAAO,WAAW,IAAI,WAAW,CAAC;AACpF;IACA,IAAI,IAAI,OAAO,SAAS,IAAI,UAAU,EAAE;IACxC,QAAQ,GAAG,GAAG,SAAS,CAAC;IACxB,QAAQ,SAAS,GAAG,WAAW,GAAG,CAAC,CAAC;IACpC,KAAK;IACL;IACA,IAAI,WAAW,GAAG,WAAW,IAAI,SAAS,OAAO,EAAE;IACnD,QAAQ,IAAI,OAAO,GAAG,IAAI,WAAW;IACrC,YAAY,OAAO;IACnB;IACA,QAAQ,OAAO,eAAe,CAAC,YAAY,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACjE,KAAK,CAAC;IACN;IACA,IAAI,SAAS,GAAG,SAAS,IAAI,SAAS,GAAG,EAAE,GAAG,EAAE;IAChD,QAAQ,IAAI,OAAO,GAAG,IAAI,WAAW;IACrC,YAAY,OAAO;IACnB;IACA,QAAQ,OAAO,WAAW,CAAC;IAC3B,YAAY,QAAQ,EAAE,iBAAiB;IACvC,YAAY,KAAK,EAAE,GAAG;IACtB,YAAY,QAAQ,EAAE,GAAG;IACzB,YAAY,OAAO,EAAE,GAAG;IACxB,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;AACN;IACA,IAAI,IAAI,IAAI,EAAE;IACd,QAAQ,WAAW,CAAC,CAAC,GAAG,0BAA0B,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACjE,QAAQ,OAAO,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3D,QAAQ,OAAO,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,KAAK;IACL;IACA,IAAI,IAAI;IACR,QAAQ,WAAW,CAAC,CAAC,GAAG,0BAA0B,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACjE;IACA,QAAQ,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC/C;IACA;IACA,QAAQ,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;IAChC;IACA,QAAQ,WAAW,CAAC,CAAC,CAAC,CAAC;IACvB,KAAK,CAAC,OAAO,GAAG,EAAE;IAClB,QAAQ,OAAO,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpC,KAAK;IACL;IACA,IAAI,SAAS,SAAS,GAAG;IACzB,QAAQ,IAAI;IACZ,YAAY,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC;IAC3D,YAAY,OAAO,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE;IAC/D,gBAAgB,IAAI,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,GAAG,KAAK,GAAG,GAAG,EAAE;IAC7E,oBAAoB,IAAI,YAAY,EAAE;IACtC,wBAAwB,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC;IACzF;IACA,wBAAwB,WAAW,CAAC,OAAO,CAAC,CAAC;IAC7C,qBAAqB;IACrB;IACA;IACA,oBAAoB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACvC,oBAAoB,OAAO,CAAC,CAAC;IAC7B,iBAAiB;IACjB,aAAa;IACb;IACA,YAAY,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3B;IACA,YAAY,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7D;IACA;IACA,YAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,SAAS,CAAC,OAAO,GAAG,EAAE;IACtB,YAAY,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACjC,SAAS;IACT,KAAK;IACL;IACA;IACA,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IA2BD;;IC9kFO,SAAS,IAAI,GAAG,EAAE;IACzB,IAAI,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;IAChC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;AAC1C;IACA,IAAI,OAAO,IAAI,IAAI,WAAW,IAAI,eAAe,IAAI,IAAI,EAAE;IAC3D,IAAI,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE;IAC7C,QAAQ,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,iBAAiB,EAAE;IACtD,YAAY,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5D,SAAS;IACT,KAAK,CAAC,CAAC;IACP,CAAC;;;;;;;;;;;;;;;;"}